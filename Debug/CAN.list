
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060bc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080061f8  080061f8  000071f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080062a8  080062a8  000072a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000120  20000008  080062ac  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  20000128  080063cc  00008128  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200002e4  080063cc  000082e4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY
  9 .debug_info   000138d1  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d7f  00000000  00000000  0001ba29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000017f8  00000000  00000000  0001e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001231  00000000  00000000  0001ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024020  00000000  00000000  000211d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000160ff  00000000  00000000  000451f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e4f1f  00000000  00000000  0005b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0014020f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000064d0  00000000  00000000  00140254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000069  00000000  00000000  00146724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000128 	.word	0x20000128
 8000158:	00000000 	.word	0x00000000
 800015c:	080061e0 	.word	0x080061e0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000012c 	.word	0x2000012c
 8000178:	080061e0 	.word	0x080061e0

0800017c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b088      	sub	sp, #32
 8000180:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Initialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000186:	2300      	movs	r3, #0
 8000188:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800018a:	2300      	movs	r3, #0
 800018c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000196:	2300      	movs	r3, #0
 8000198:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800019a:	2300      	movs	r3, #0
 800019c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 80001a2:	2300      	movs	r3, #0
 80001a4:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Standard Filter
 80001a6:	2300      	movs	r3, #0
 80001a8:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80001aa:	2300      	movs	r3, #0
 80001ac:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80001ae:	2300      	movs	r3, #0
 80001b0:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80001b2:	2300      	movs	r3, #0
 80001b4:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Extended Filter
 80001b6:	2308      	movs	r3, #8
 80001b8:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80001ba:	2300      	movs	r3, #0
 80001bc:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80001c6:	2300      	movs	r3, #0
 80001c8:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80001d6:	2300      	movs	r3, #0
 80001d8:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80001da:	2300      	movs	r3, #0
 80001dc:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80001de:	2300      	movs	r3, #0
 80001e0:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80001e2:	2300      	movs	r3, #0
 80001e4:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80001e6:	2300      	movs	r3, #0
 80001e8:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80001f2:	2300      	movs	r3, #0
 80001f4:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80001f6:	2308      	movs	r3, #8
 80001f8:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80001fe:	2300      	movs	r3, #0
 8000200:	72fb      	strb	r3, [r7, #11]
  
  /* Initialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000202:	f000 fabd 	bl	8000780 <MCP2515_Initialize>
 8000206:	4603      	mov	r3, r0
 8000208:	f083 0301 	eor.w	r3, r3, #1
 800020c:	b2db      	uxtb	r3, r3
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <CANSPI_Initialize+0x9a>
  {
    return false;
 8000212:	2300      	movs	r3, #0
 8000214:	e05e      	b.n	80002d4 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000216:	f000 fad5 	bl	80007c4 <MCP2515_SetConfigMode>
 800021a:	4603      	mov	r3, r0
 800021c:	f083 0301 	eor.w	r3, r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <CANSPI_Initialize+0xae>
  {
    return false;
 8000226:	2300      	movs	r3, #0
 8000228:	e054      	b.n	80002d4 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	461a      	mov	r2, r3
 800022e:	2123      	movs	r1, #35	@ 0x23
 8000230:	2020      	movs	r0, #32
 8000232:	f000 fb6e 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000236:	463b      	mov	r3, r7
 8000238:	461a      	mov	r2, r3
 800023a:	2127      	movs	r1, #39	@ 0x27
 800023c:	2024      	movs	r0, #36	@ 0x24
 800023e:	f000 fb68 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000242:	f107 031c 	add.w	r3, r7, #28
 8000246:	461a      	mov	r2, r3
 8000248:	2103      	movs	r1, #3
 800024a:	2000      	movs	r0, #0
 800024c:	f000 fb61 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	461a      	mov	r2, r3
 8000256:	2107      	movs	r1, #7
 8000258:	2004      	movs	r0, #4
 800025a:	f000 fb5a 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	461a      	mov	r2, r3
 8000264:	210b      	movs	r1, #11
 8000266:	2008      	movs	r0, #8
 8000268:	f000 fb53 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	461a      	mov	r2, r3
 8000272:	2113      	movs	r1, #19
 8000274:	2010      	movs	r0, #16
 8000276:	f000 fb4c 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	461a      	mov	r2, r3
 8000280:	2117      	movs	r1, #23
 8000282:	2014      	movs	r0, #20
 8000284:	f000 fb45 	bl	8000912 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	461a      	mov	r2, r3
 800028e:	211b      	movs	r1, #27
 8000290:	2018      	movs	r0, #24
 8000292:	f000 fb3e 	bl	8000912 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000296:	2104      	movs	r1, #4
 8000298:	2060      	movs	r0, #96	@ 0x60
 800029a:	f000 fb15 	bl	80008c8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800029e:	2101      	movs	r1, #1
 80002a0:	2070      	movs	r0, #112	@ 0x70
 80002a2:	f000 fb11 	bl	80008c8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80002a6:	2100      	movs	r1, #0
 80002a8:	202a      	movs	r0, #42	@ 0x2a
 80002aa:	f000 fb0d 	bl	80008c8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80002ae:	21e5      	movs	r1, #229	@ 0xe5
 80002b0:	2029      	movs	r0, #41	@ 0x29
 80002b2:	f000 fb09 	bl	80008c8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80002b6:	2183      	movs	r1, #131	@ 0x83
 80002b8:	2028      	movs	r0, #40	@ 0x28
 80002ba:	f000 fb05 	bl	80008c8 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80002be:	f000 fa9f 	bl	8000800 <MCP2515_SetNormalMode>
 80002c2:	4603      	mov	r3, r0
 80002c4:	f083 0301 	eor.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <CANSPI_Initialize+0x156>
    return false;
 80002ce:	2300      	movs	r3, #0
 80002d0:	e000      	b.n	80002d4 <CANSPI_Initialize+0x158>
  
  return true;
 80002d2:	2301      	movs	r3, #1
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3720      	adds	r7, #32
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 80002e8:	4b36      	ldr	r3, [pc, #216]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 80002ee:	4b35      	ldr	r3, [pc, #212]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80002f4:	4b33      	ldr	r3, [pc, #204]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80002fa:	4b32      	ldr	r3, [pc, #200]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000300:	f000 fb79 	bl	80009f6 <MCP2515_ReadStatus>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b2f      	ldr	r3, [pc, #188]	@ (80003c8 <CANSPI_Transmit+0xec>)
 800030a:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 800030c:	4b2e      	ldr	r3, [pc, #184]	@ (80003c8 <CANSPI_Transmit+0xec>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d115      	bne.n	8000346 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	6858      	ldr	r0, [r3, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4a28      	ldr	r2, [pc, #160]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 8000324:	4619      	mov	r1, r3
 8000326:	f000 f928 	bl	800057a <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	7a1a      	ldrb	r2, [r3, #8]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3309      	adds	r3, #9
 8000332:	4924      	ldr	r1, [pc, #144]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 8000334:	2040      	movs	r0, #64	@ 0x40
 8000336:	f000 fb17 	bl	8000968 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800033a:	2081      	movs	r0, #129	@ 0x81
 800033c:	f000 fb40 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000340:	2301      	movs	r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e038      	b.n	80003b8 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000346:	4b20      	ldr	r3, [pc, #128]	@ (80003c8 <CANSPI_Transmit+0xec>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	f003 0310 	and.w	r3, r3, #16
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d115      	bne.n	8000380 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	6858      	ldr	r0, [r3, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4a19      	ldr	r2, [pc, #100]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 800035e:	4619      	mov	r1, r3
 8000360:	f000 f90b 	bl	800057a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7a1a      	ldrb	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	3309      	adds	r3, #9
 800036c:	4915      	ldr	r1, [pc, #84]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 800036e:	2042      	movs	r0, #66	@ 0x42
 8000370:	f000 fafa 	bl	8000968 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000374:	2082      	movs	r0, #130	@ 0x82
 8000376:	f000 fb23 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800037a:	2301      	movs	r3, #1
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e01b      	b.n	80003b8 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <CANSPI_Transmit+0xec>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d114      	bne.n	80003b8 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6858      	ldr	r0, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	4a0b      	ldr	r2, [pc, #44]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 8000398:	4619      	mov	r1, r3
 800039a:	f000 f8ee 	bl	800057a <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	7a1a      	ldrb	r2, [r3, #8]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3309      	adds	r3, #9
 80003a6:	4907      	ldr	r1, [pc, #28]	@ (80003c4 <CANSPI_Transmit+0xe8>)
 80003a8:	2044      	movs	r0, #68	@ 0x44
 80003aa:	f000 fadd 	bl	8000968 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80003ae:	2084      	movs	r0, #132	@ 0x84
 80003b0:	f000 fb06 	bl	80009c0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000148 	.word	0x20000148
 80003c8:	20000144 	.word	0x20000144

080003cc <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80003d8:	f000 fb2a 	bl	8000a30 <MCP2515_GetRxStatus>
 80003dc:	4603      	mov	r3, r0
 80003de:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80003e0:	7b3b      	ldrb	r3, [r7, #12]
 80003e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d066      	beq.n	80004ba <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80003ec:	7b3b      	ldrb	r3, [r7, #12]
 80003ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b40      	cmp	r3, #64	@ 0x40
 80003f6:	bf0c      	ite	eq
 80003f8:	2301      	moveq	r3, #1
 80003fa:	2300      	movne	r3, #0
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	7b3b      	ldrb	r3, [r7, #12]
 8000400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2bc0      	cmp	r3, #192	@ 0xc0
 8000408:	bf0c      	ite	eq
 800040a:	2301      	moveq	r3, #1
 800040c:	2300      	movne	r3, #0
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4313      	orrs	r3, r2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d007      	beq.n	8000428 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	220d      	movs	r2, #13
 800041e:	4619      	mov	r1, r3
 8000420:	2090      	movs	r0, #144	@ 0x90
 8000422:	f000 fa2e 	bl	8000882 <MCP2515_ReadRxSequence>
 8000426:	e00c      	b.n	8000442 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000428:	7b3b      	ldrb	r3, [r7, #12]
 800042a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800042e:	b2db      	uxtb	r3, r3
 8000430:	2b80      	cmp	r3, #128	@ 0x80
 8000432:	d106      	bne.n	8000442 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	220d      	movs	r2, #13
 800043a:	4619      	mov	r1, r3
 800043c:	2094      	movs	r0, #148	@ 0x94
 800043e:	f000 fa20 	bl	8000882 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000442:	7b3b      	ldrb	r3, [r7, #12]
 8000444:	f003 0318 	and.w	r3, r3, #24
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b10      	cmp	r3, #16
 800044c:	d10c      	bne.n	8000468 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2202      	movs	r2, #2
 8000452:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000454:	7cb8      	ldrb	r0, [r7, #18]
 8000456:	7cf9      	ldrb	r1, [r7, #19]
 8000458:	7c3a      	ldrb	r2, [r7, #16]
 800045a:	7c7b      	ldrb	r3, [r7, #17]
 800045c:	f000 f832 	bl	80004c4 <convertReg2ExtendedCANid>
 8000460:	4602      	mov	r2, r0
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	e00b      	b.n	8000480 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2201      	movs	r2, #1
 800046c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800046e:	7c3b      	ldrb	r3, [r7, #16]
 8000470:	7c7a      	ldrb	r2, [r7, #17]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f863 	bl	8000540 <convertReg2StandardCANid>
 800047a:	4602      	mov	r2, r0
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000480:	7d3a      	ldrb	r2, [r7, #20]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000486:	7d7a      	ldrb	r2, [r7, #21]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800048c:	7dba      	ldrb	r2, [r7, #22]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000492:	7dfa      	ldrb	r2, [r7, #23]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000498:	7e3a      	ldrb	r2, [r7, #24]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800049e:	7e7a      	ldrb	r2, [r7, #25]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80004a4:	7eba      	ldrb	r2, [r7, #26]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80004aa:	7efa      	ldrb	r2, [r7, #27]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80004b0:	7f3a      	ldrb	r2, [r7, #28]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80004ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80004c4:	b490      	push	{r4, r7}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4604      	mov	r4, r0
 80004cc:	4608      	mov	r0, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	461a      	mov	r2, r3
 80004d2:	4623      	mov	r3, r4
 80004d4:	71fb      	strb	r3, [r7, #7]
 80004d6:	4603      	mov	r3, r0
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	460b      	mov	r3, r1
 80004dc:	717b      	strb	r3, [r7, #5]
 80004de:	4613      	mov	r3, r2
 80004e0:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80004ea:	793b      	ldrb	r3, [r7, #4]
 80004ec:	f003 0303 	and.w	r3, r3, #3
 80004f0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80004f2:	793b      	ldrb	r3, [r7, #4]
 80004f4:	095b      	lsrs	r3, r3, #5
 80004f6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4413      	add	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4413      	add	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4413      	add	r3, r2
 8000520:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	4413      	add	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000534:	697b      	ldr	r3, [r7, #20]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bc90      	pop	{r4, r7}
 800053e:	4770      	bx	lr

08000540 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	00db      	lsls	r3, r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	095b      	lsrs	r3, r3, #5
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	4413      	add	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	460b      	mov	r3, r1
 8000584:	607a      	str	r2, [r7, #4]
 8000586:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d12e      	bne.n	80005f0 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	0a1b      	lsrs	r3, r3, #8
 80005ac:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f023 031f 	bic.w	r3, r3, #31
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	7dfb      	ldrb	r3, [r7, #23]
 80005ca:	4413      	add	r3, r2
 80005cc:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	3308      	adds	r3, #8
 80005d2:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80005d4:	7dfb      	ldrb	r3, [r7, #23]
 80005d6:	f023 0314 	bic.w	r3, r3, #20
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	0a1b      	lsrs	r3, r3, #8
 80005e4:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80005ee:	e013      	b.n	8000618 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2200      	movs	r2, #0
 80005f4:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	015b      	lsls	r3, r3, #5
 8000600:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	371c      	adds	r7, #28
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LTC2497_Read>:

extern I2C_HandleTypeDef hi2c1; // Ensure this I2C handle is defined and initialized in your main code

/* Reads data from the LTC2497 ADC */
int8_t LTC2497_Read(uint8_t i2c_address, uint8_t adc_command, int32_t *adc_code, uint16_t timeout)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af02      	add	r7, sp, #8
 800062a:	603a      	str	r2, [r7, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
 8000632:	460b      	mov	r3, r1
 8000634:	71bb      	strb	r3, [r7, #6]
 8000636:	4613      	mov	r3, r2
 8000638:	80bb      	strh	r3, [r7, #4]
    uint8_t data[3];
    HAL_StatusTypeDef status;
    uint32_t tickstart = HAL_GetTick();
 800063a:	f001 f92d 	bl	8001898 <HAL_GetTick>
 800063e:	61f8      	str	r0, [r7, #28]

    /* Send the command byte to start conversion */
    status = HAL_I2C_Master_Transmit(&hi2c1, (i2c_address << 1), &adc_command, 1, timeout);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	b29b      	uxth	r3, r3
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	b299      	uxth	r1, r3
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	1dba      	adds	r2, r7, #6
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	483b      	ldr	r0, [pc, #236]	@ (8000740 <LTC2497_Read+0x11c>)
 8000652:	f002 fb03 	bl	8002c5c <HAL_I2C_Master_Transmit>
 8000656:	4603      	mov	r3, r0
 8000658:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK)
 800065a:	7efb      	ldrb	r3, [r7, #27]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <LTC2497_Read+0x40>
    {
        return 1; /* Error in sending command */
 8000660:	2301      	movs	r3, #1
 8000662:	e068      	b.n	8000736 <LTC2497_Read+0x112>

    /* Wait for conversion to complete */
    while (1)
    {
        /* Attempt to read data */
        status = HAL_I2C_Master_Receive(&hi2c1, (i2c_address << 1), data, 3, timeout); // Read 3 bytes
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	b29b      	uxth	r3, r3
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	b299      	uxth	r1, r3
 800066c:	88bb      	ldrh	r3, [r7, #4]
 800066e:	f107 020c 	add.w	r2, r7, #12
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2303      	movs	r3, #3
 8000676:	4832      	ldr	r0, [pc, #200]	@ (8000740 <LTC2497_Read+0x11c>)
 8000678:	f002 fc08 	bl	8002e8c <HAL_I2C_Master_Receive>
 800067c:	4603      	mov	r3, r0
 800067e:	76fb      	strb	r3, [r7, #27]

        if (status == HAL_OK)
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00d      	beq.n	80006a2 <LTC2497_Read+0x7e>
        {
            break; /* Data received successfully */
        }
        if ((HAL_GetTick() - tickstart) > timeout)
 8000686:	f001 f907 	bl	8001898 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	1ad2      	subs	r2, r2, r3
 8000690:	88bb      	ldrh	r3, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	d901      	bls.n	800069a <LTC2497_Read+0x76>
        {
            return 1; /* Timeout */
 8000696:	2301      	movs	r3, #1
 8000698:	e04d      	b.n	8000736 <LTC2497_Read+0x112>
        }
        HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f001 f914 	bl	80018c8 <HAL_Delay>
        status = HAL_I2C_Master_Receive(&hi2c1, (i2c_address << 1), data, 3, timeout); // Read 3 bytes
 80006a0:	e7e0      	b.n	8000664 <LTC2497_Read+0x40>
            break; /* Data received successfully */
 80006a2:	bf00      	nop
    }

    /* Combine the three bytes into a single 24-bit value */
    uint32_t raw_code = ((uint32_t)data[0] << 16) |
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	041a      	lsls	r2, r3, #16
                        ((uint32_t)data[1] << 8) |
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	021b      	lsls	r3, r3, #8
    uint32_t raw_code = ((uint32_t)data[0] << 16) |
 80006ac:	4313      	orrs	r3, r2
                        data[2];
 80006ae:	7bba      	ldrb	r2, [r7, #14]
    uint32_t raw_code = ((uint32_t)data[0] << 16) |
 80006b0:	4313      	orrs	r3, r2
 80006b2:	617b      	str	r3, [r7, #20]

    /* Extract SIG and MSB bits */
    uint8_t sig = (raw_code >> 23) & 0x01;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	0ddb      	lsrs	r3, r3, #23
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	74fb      	strb	r3, [r7, #19]
    uint8_t msb = (raw_code >> 22) & 0x01;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	0d9b      	lsrs	r3, r3, #22
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	74bb      	strb	r3, [r7, #18]

    /* Extract the 16-bit conversion result */
    uint16_t conversion_result = ((data[0] & 0x3F) << 10) | (data[1] << 2) | (data[2] >> 6);
 80006cc:	7b3b      	ldrb	r3, [r7, #12]
 80006ce:	029b      	lsls	r3, r3, #10
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	7b7b      	ldrb	r3, [r7, #13]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b21a      	sxth	r2, r3
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	823b      	strh	r3, [r7, #16]


    /* Handle Over-Range and Under-Range Conditions */
    if (sig && msb)
 80006ea:	7cfb      	ldrb	r3, [r7, #19]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d007      	beq.n	8000700 <LTC2497_Read+0xdc>
 80006f0:	7cbb      	ldrb	r3, [r7, #18]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d004      	beq.n	8000700 <LTC2497_Read+0xdc>
    {
        /* VIN >= FS (Over-Range Positive) */
        *adc_code = 2147483647; // Maximum positive value for 32-bit
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e019      	b.n	8000734 <LTC2497_Read+0x110>
    }
    else if (!sig && !msb)
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d107      	bne.n	8000716 <LTC2497_Read+0xf2>
 8000706:	7cbb      	ldrb	r3, [r7, #18]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d104      	bne.n	8000716 <LTC2497_Read+0xf2>
    {
        /* VIN < -FS (Under-Range Negative) */
        *adc_code = -2147483648; // Maximum negative value for 16-bit
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e00e      	b.n	8000734 <LTC2497_Read+0x110>
    }
    else if (sig && !msb)
 8000716:	7cfb      	ldrb	r3, [r7, #19]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <LTC2497_Read+0x106>
 800071c:	7cbb      	ldrb	r3, [r7, #18]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d103      	bne.n	800072a <LTC2497_Read+0x106>
    {
    	/* Treat as unsigned positive */
    	*adc_code = (int32_t)conversion_result;
 8000722:	8a3a      	ldrh	r2, [r7, #16]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e004      	b.n	8000734 <LTC2497_Read+0x110>
    }
    else // (!sig && msb)
    {
        /* Normal Negative Range */
        /* Treat as signed two's complement */
        *adc_code = (int32_t)((int16_t)conversion_result);
 800072a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800072e:	461a      	mov	r2, r3
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	601a      	str	r2, [r3, #0]
    }

    return 0; /* Success */
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001b0 	.word	0x200001b0

08000744 <LTC2497_CodeToVoltage>:

/* Converts ADC code to voltage */
float LTC2497_CodeToVoltage(int32_t adc_code, float vref)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	ed87 0a00 	vstr	s0, [r7]
    float voltage;

    /* The full-scale range is FS = 0.5 * Vref */
    /* Voltage calculation based on two's complement */
    voltage = ((float)adc_code / 33497.03184f);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800077c <LTC2497_CodeToVoltage+0x38>
 800075e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000762:	edc7 7a03 	vstr	s15, [r7, #12]

    return voltage;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	ee07 3a90 	vmov	s15, r3
}
 800076c:	eeb0 0a67 	vmov.f32	s0, s15
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	4702d908 	.word	0x4702d908

08000780 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000790:	f002 f9b0 	bl	8002af4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8000794:	230a      	movs	r3, #10
 8000796:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <MCP2515_Initialize+0x40>)
 800079a:	f005 fb2a 	bl	8005df2 <HAL_SPI_GetState>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d101      	bne.n	80007a8 <MCP2515_Initialize+0x28>
      return true;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e006      	b.n	80007b6 <MCP2515_Initialize+0x36>
    
    loop--;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f1      	bne.n	8000798 <MCP2515_Initialize+0x18>
      
  return false;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000240 	.word	0x20000240

080007c4 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	200f      	movs	r0, #15
 80007ce:	f000 f87b 	bl	80008c8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80007d2:	230a      	movs	r3, #10
 80007d4:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80007d6:	200e      	movs	r0, #14
 80007d8:	f000 f830 	bl	800083c <MCP2515_ReadByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80007e2:	2b80      	cmp	r3, #128	@ 0x80
 80007e4:	d101      	bne.n	80007ea <MCP2515_SetConfigMode+0x26>
      return true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e006      	b.n	80007f8 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ef      	bne.n	80007d6 <MCP2515_SetConfigMode+0x12>
  
  return false;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	200f      	movs	r0, #15
 800080a:	f000 f85d 	bl	80008c8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800080e:	230a      	movs	r3, #10
 8000810:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000812:	200e      	movs	r0, #14
 8000814:	f000 f812 	bl	800083c <MCP2515_ReadByte>
 8000818:	4603      	mov	r3, r0
 800081a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <MCP2515_SetNormalMode+0x26>
      return true;
 8000822:	2301      	movs	r3, #1
 8000824:	e006      	b.n	8000834 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	3b01      	subs	r3, #1
 800082a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1ef      	bne.n	8000812 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800084c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000850:	f002 f950 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f909 	bl	8000a6c <SPI_Tx>
  SPI_Tx(address);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f905 	bl	8000a6c <SPI_Tx>
  retVal = SPI_Rx();
 8000862:	f000 f929 	bl	8000ab8 <SPI_Rx>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000874:	f002 f93e 	bl	8002af4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000878:	7bfb      	ldrb	r3, [r7, #15]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	6039      	str	r1, [r7, #0]
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4613      	mov	r3, r2
 8000890:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089c:	f002 f92a 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f8e2 	bl	8000a6c <SPI_Tx>
  SPI_RxBuffer(data, length);
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	4619      	mov	r1, r3
 80008ac:	6838      	ldr	r0, [r7, #0]
 80008ae:	f000 f913 	bl	8000ad8 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f002 f91a 	bl	8002af4 <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f002 f907 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80008e6:	2002      	movs	r0, #2
 80008e8:	f000 f8c0 	bl	8000a6c <SPI_Tx>
  SPI_Tx(address);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8bc 	bl	8000a6c <SPI_Tx>
  SPI_Tx(data);  
 80008f4:	79bb      	ldrb	r3, [r7, #6]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f8b8 	bl	8000a6c <SPI_Tx>
    
  MCP2515_CS_HIGH();
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f002 f8f5 	bl	8002af4 <HAL_GPIO_WritePin>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	603a      	str	r2, [r7, #0]
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	460b      	mov	r3, r1
 8000920:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092c:	f002 f8e2 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000930:	2002      	movs	r0, #2
 8000932:	f000 f89b 	bl	8000a6c <SPI_Tx>
  SPI_Tx(startAddress);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f897 	bl	8000a6c <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800093e:	79ba      	ldrb	r2, [r7, #6]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3301      	adds	r3, #1
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	6838      	ldr	r0, [r7, #0]
 800094e:	f000 f89f 	bl	8000a90 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f002 f8ca 	bl	8002af4 <HAL_GPIO_WritePin>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	4613      	mov	r3, r2
 8000978:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000984:	f002 f8b6 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f86e 	bl	8000a6c <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000990:	2104      	movs	r1, #4
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f000 f87c 	bl	8000a90 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f866 	bl	8000a6c <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	4619      	mov	r1, r3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f873 	bl	8000a90 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f002 f89e 	bl	8002af4 <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d4:	f002 f88e 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f846 	bl	8000a6c <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ea:	f002 f883 	bl	8002af4 <HAL_GPIO_WritePin>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a06:	f002 f875 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000a0a:	20a0      	movs	r0, #160	@ 0xa0
 8000a0c:	f000 f82e 	bl	8000a6c <SPI_Tx>
  retVal = SPI_Rx();
 8000a10:	f000 f852 	bl	8000ab8 <SPI_Rx>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f002 f867 	bl	8002af4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a40:	f002 f858 	bl	8002af4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000a44:	20b0      	movs	r0, #176	@ 0xb0
 8000a46:	f000 f811 	bl	8000a6c <SPI_Tx>
  retVal = SPI_Rx();
 8000a4a:	f000 f835 	bl	8000ab8 <SPI_Rx>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f002 f84a 	bl	8002af4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000a76:	1df9      	adds	r1, r7, #7
 8000a78:	230a      	movs	r3, #10
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <SPI_Tx+0x20>)
 8000a7e:	f004 fcea 	bl	8005456 <HAL_SPI_Transmit>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000240 	.word	0x20000240

08000a90 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <SPI_TxBuffer+0x24>)
 8000aa6:	f004 fcd6 	bl	8005456 <HAL_SPI_Transmit>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000240 	.word	0x20000240

08000ab8 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000abe:	1df9      	adds	r1, r7, #7
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <SPI_Rx+0x1c>)
 8000ac6:	f004 fe3b 	bl	8005740 <HAL_SPI_Receive>
  return retVal;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000240 	.word	0x20000240

08000ad8 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	230a      	movs	r3, #10
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <SPI_RxBuffer+0x24>)
 8000aee:	f004 fe27 	bl	8005740 <HAL_SPI_Receive>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000240 	.word	0x20000240

08000b00 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b24:	68fb      	ldr	r3, [r7, #12]
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <VoltageToTemperature>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Function to convert differential voltage to temperature */
float VoltageToTemperature(float voltage)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Handle out-of-range voltages
    if (voltage >= voltage_table[0])
 8000b3e:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000b40:	edd3 7a00 	vldr	s15, [r3]
 8000b44:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b50:	db02      	blt.n	8000b58 <VoltageToTemperature+0x24>
    {
        return temperature_table[0]; // Voltage is higher than highest in table
 8000b52:	4b3c      	ldr	r3, [pc, #240]	@ (8000c44 <VoltageToTemperature+0x110>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	e06a      	b.n	8000c2e <VoltageToTemperature+0xfa>
    }
    if (voltage <= voltage_table[NUM_POINTS - 1])
 8000b58:	4b39      	ldr	r3, [pc, #228]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000b5a:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8000b5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6a:	d803      	bhi.n	8000b74 <VoltageToTemperature+0x40>
    {
        return temperature_table[NUM_POINTS - 1]; // Voltage is lower than lowest in table
 8000b6c:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <VoltageToTemperature+0x110>)
 8000b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b72:	e05c      	b.n	8000c2e <VoltageToTemperature+0xfa>
    }

    // Search for the interval containing the voltage
    for (int i = 0; i < NUM_POINTS - 1; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	e055      	b.n	8000c26 <VoltageToTemperature+0xf2>
    {
        if (voltage <= voltage_table[i] && voltage >= voltage_table[i+1])
 8000b7a:	4a31      	ldr	r2, [pc, #196]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	edd3 7a00 	vldr	s15, [r3]
 8000b86:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b92:	d845      	bhi.n	8000c20 <VoltageToTemperature+0xec>
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	3301      	adds	r3, #1
 8000b98:	4a29      	ldr	r2, [pc, #164]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bae:	db37      	blt.n	8000c20 <VoltageToTemperature+0xec>
        {
            // Perform linear interpolation
            float v1 = voltage_table[i];
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	61bb      	str	r3, [r7, #24]
            float v2 = voltage_table[i+1];
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <VoltageToTemperature+0x10c>)
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	617b      	str	r3, [r7, #20]
            float t1 = temperature_table[i];
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <VoltageToTemperature+0x110>)
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	613b      	str	r3, [r7, #16]
            float t2 = temperature_table[i+1];
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <VoltageToTemperature+0x110>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	60fb      	str	r3, [r7, #12]

            // Interpolate
            float temperature = t1 + (voltage - v1) * (t2 - t1) / (v2 - v1);
 8000be4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000be8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bf0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bf8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000bfc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000c00:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c18:	edc7 7a02 	vstr	s15, [r7, #8]

            return temperature;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	e006      	b.n	8000c2e <VoltageToTemperature+0xfa>
    for (int i = 0; i < NUM_POINTS - 1; i++)
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	3301      	adds	r3, #1
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	dda6      	ble.n	8000b7a <VoltageToTemperature+0x46>
        }
    }

    // If voltage not found in table, return an error value
    return -999; // Indicate error
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <VoltageToTemperature+0x114>)
}
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eeb0 0a67 	vmov.f32	s0, s15
 8000c36:	3724      	adds	r7, #36	@ 0x24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000014 	.word	0x20000014
 8000c44:	20000098 	.word	0x20000098
 8000c48:	c479c000 	.word	0xc479c000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 8000c52:	f000 fdb3 	bl	80017bc <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  SystemClock_Config();
 8000c56:	f000 f895 	bl	8000d84 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000c5a:	f000 f8fd 	bl	8000e58 <PeriphCommonClock_Config>
  MX_IPCC_Init();
 8000c5e:	f000 f9bf 	bl	8000fe0 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  MX_GPIO_Init();
 8000c62:	f000 fa0f 	bl	8001084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c66:	f000 f915 	bl	8000e94 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c6a:	f000 f979 	bl	8000f60 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c6e:	f000 f9cb 	bl	8001008 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000c72:	f7ff fa83 	bl	800017c <CANSPI_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        for (uint8_t i = 0; i < NUM_THERMISTORS; i++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e039      	b.n	8000cf0 <main+0xa4>
        {
            // Build command for the current differential channel
            adc_command = differential_channels[i];  // Adjusted command building
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4a36      	ldr	r2, [pc, #216]	@ (8000d58 <main+0x10c>)
 8000c80:	5cd2      	ldrb	r2, [r2, r3]
 8000c82:	4b36      	ldr	r3, [pc, #216]	@ (8000d5c <main+0x110>)
 8000c84:	701a      	strb	r2, [r3, #0]

            // Read temperature data from LTC2497
            if (LTC2497_Read(LTC2497_DEVICE_ADDRESS, adc_command, &adc_code, 1000) == 0)  // Removed &hi2c1
 8000c86:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <main+0x110>)
 8000c88:	7819      	ldrb	r1, [r3, #0]
 8000c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8e:	4a34      	ldr	r2, [pc, #208]	@ (8000d60 <main+0x114>)
 8000c90:	2076      	movs	r0, #118	@ 0x76
 8000c92:	f7ff fcc7 	bl	8000624 <LTC2497_Read>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d126      	bne.n	8000cea <main+0x9e>
            {
                // Convert ADC code to voltage
                adc_voltage = LTC2497_CodeToVoltage(adc_code, vref);
 8000c9c:	4b30      	ldr	r3, [pc, #192]	@ (8000d60 <main+0x114>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a30      	ldr	r2, [pc, #192]	@ (8000d64 <main+0x118>)
 8000ca2:	edd2 7a00 	vldr	s15, [r2]
 8000ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd4a 	bl	8000744 <LTC2497_CodeToVoltage>
 8000cb0:	eef0 7a40 	vmov.f32	s15, s0
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d68 <main+0x11c>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]

                // Convert voltage to temperature in degrees Celsius
                temperature_celsius = VoltageToTemperature(adc_voltage);
 8000cba:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <main+0x11c>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc4:	f7ff ff36 	bl	8000b34 <VoltageToTemperature>
 8000cc8:	eef0 7a40 	vmov.f32	s15, s0
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <main+0x120>)
 8000cce:	edc3 7a00 	vstr	s15, [r3]

                // Store temperature as int8_t in degrees Celsius
                thermistor_values[i] = (int8_t)(temperature_celsius);
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <main+0x120>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cde:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ce2:	793a      	ldrb	r2, [r7, #4]
 8000ce4:	b251      	sxtb	r1, r2
 8000ce6:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <main+0x124>)
 8000ce8:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < NUM_THERMISTORS; i++)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	3301      	adds	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d9c2      	bls.n	8000c7c <main+0x30>
            }

        }

              // Send Address Claim Broadcast every 200 ms
              if (HAL_GetTick() - last_address_claim_time >= 200)
 8000cf6:	f000 fdcf 	bl	8001898 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <main+0x128>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d04:	d906      	bls.n	8000d14 <main+0xc8>
              {
                  Send_Address_Claim_Broadcast();
 8000d06:	f000 fa23 	bl	8001150 <Send_Address_Claim_Broadcast>
                  last_address_claim_time = HAL_GetTick();
 8000d0a:	f000 fdc5 	bl	8001898 <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <main+0x128>)
 8000d12:	6013      	str	r3, [r2, #0]
              }

              // Send Thermistor Module Broadcast every 100 ms
              if (HAL_GetTick() - last_module_broadcast_time >= 100)
 8000d14:	f000 fdc0 	bl	8001898 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <main+0x12c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b63      	cmp	r3, #99	@ 0x63
 8000d22:	d906      	bls.n	8000d32 <main+0xe6>
              {
                  Send_Thermistor_Module_Broadcast();
 8000d24:	f000 fa38 	bl	8001198 <Send_Thermistor_Module_Broadcast>
                  last_module_broadcast_time = HAL_GetTick();
 8000d28:	f000 fdb6 	bl	8001898 <HAL_GetTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <main+0x12c>)
 8000d30:	6013      	str	r3, [r2, #0]
              }

              // Send Thermistor General Broadcast every 100 ms
              if (HAL_GetTick() - last_general_broadcast_time >= 100)
 8000d32:	f000 fdb1 	bl	8001898 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <main+0x130>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b63      	cmp	r3, #99	@ 0x63
 8000d40:	d906      	bls.n	8000d50 <main+0x104>
              {
                  Send_Thermistor_General_Broadcast();
 8000d42:	f000 fab9 	bl	80012b8 <Send_Thermistor_General_Broadcast>
                  last_general_broadcast_time = HAL_GetTick();
 8000d46:	f000 fda7 	bl	8001898 <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <main+0x130>)
 8000d4e:	6013      	str	r3, [r2, #0]
              }

              // Optional: Handle incoming CAN messages
              if (CANSPI_Receive(&rxMessage))
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <main+0x134>)
 8000d52:	f7ff fb3b 	bl	80003cc <CANSPI_Receive>
        for (uint8_t i = 0; i < NUM_THERMISTORS; i++)
 8000d56:	e78e      	b.n	8000c76 <main+0x2a>
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	200002cc 	.word	0x200002cc
 8000d60:	200002d0 	.word	0x200002d0
 8000d64:	20000010 	.word	0x20000010
 8000d68:	200002d4 	.word	0x200002d4
 8000d6c:	200002d8 	.word	0x200002d8
 8000d70:	200002a4 	.word	0x200002a4
 8000d74:	200002ac 	.word	0x200002ac
 8000d78:	200002b0 	.word	0x200002b0
 8000d7c:	200002b4 	.word	0x200002b4
 8000d80:	200002b8 	.word	0x200002b8

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09a      	sub	sp, #104	@ 0x68
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2248      	movs	r2, #72	@ 0x48
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 f9f8 	bl	8006188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000daa:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <SystemClock_Config+0xd0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000db2:	4a28      	ldr	r2, [pc, #160]	@ (8000e54 <SystemClock_Config+0xd0>)
 8000db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <SystemClock_Config+0xd0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000dc6:	2323      	movs	r3, #35	@ 0x23
 8000dc8:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dda:	2340      	movs	r3, #64	@ 0x40
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de2:	2360      	movs	r3, #96	@ 0x60
 8000de4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000df2:	2318      	movs	r3, #24
 8000df4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000dfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e06:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 f873 	bl	8003ef8 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e18:	f000 fac4 	bl	80013a4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000e1c:	236f      	movs	r3, #111	@ 0x6f
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2303      	movs	r3, #3
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fbcf 	bl	80045e0 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e48:	f000 faac 	bl	80013a4 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3768      	adds	r7, #104	@ 0x68
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	58000400 	.word	0x58000400

08000e58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	@ 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2250      	movs	r2, #80	@ 0x50
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 f98f 	bl	8006188 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 ffc1 	bl	8004e02 <HAL_RCCEx_PeriphCLKConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000e86:	f000 fa8d 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000e8a:	bf00      	nop
 8000e8c:	3750      	adds	r7, #80	@ 0x50
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000eac:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <MX_ADC1_Init+0xc0>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000f0c:	f000 fe8c 	bl	8001c28 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f16:	f000 fa45 	bl	80013a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_ADC1_Init+0xc4>)
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_ADC1_Init+0xc8>)
 8000f28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_ADC1_Init+0xbc>)
 8000f38:	f000 ffc2 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f000 fa2f 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000014c 	.word	0x2000014c
 8000f54:	50040000 	.word	0x50040000
 8000f58:	04300002 	.word	0x04300002
 8000f5c:	407f0000 	.word	0x407f0000

08000f60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd8 <MX_I2C1_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <MX_I2C1_Init+0x7c>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000f9c:	f001 fdc2 	bl	8002b24 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fa6:	f000 f9fd 	bl	80013a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000fae:	f002 fb09 	bl	80035c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fb8:	f000 f9f4 	bl	80013a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_I2C1_Init+0x74>)
 8000fc0:	f002 fb4b 	bl	800365a <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f9eb 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	00b07cb4 	.word	0x00b07cb4

08000fe0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_IPCC_Init+0x20>)
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <MX_IPCC_Init+0x24>)
 8000fe8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_IPCC_Init+0x20>)
 8000fec:	f002 fb82 	bl	80036f4 <HAL_IPCC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000ff6:	f000 f9d5 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000204 	.word	0x20000204
 8001004:	58000c00 	.word	0x58000c00

08001008 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_SPI1_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <MX_SPI1_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_SPI1_Init+0x74>)
 8001014:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_SPI1_Init+0x74>)
 8001022:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001026:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_SPI1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_SPI1_Init+0x74>)
 8001036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_SPI1_Init+0x74>)
 800103e:	2230      	movs	r2, #48	@ 0x30
 8001040:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_SPI1_Init+0x74>)
 8001056:	2207      	movs	r2, #7
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_SPI1_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_SPI1_Init+0x74>)
 8001068:	f004 f952 	bl	8005310 <HAL_SPI_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 f997 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000240 	.word	0x20000240
 8001080:	40013000 	.word	0x40013000

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fd31 	bl	8000b00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2002      	movs	r0, #2
 80010a0:	f7ff fd2e 	bl	8000b00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fd2b 	bl	8000b00 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f001 fd1e 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pull_up_Test_GPIO_Port, Pull_up_Test_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010be:	4822      	ldr	r0, [pc, #136]	@ (8001148 <MX_GPIO_Init+0xc4>)
 80010c0:	f001 fd18 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f001 fb99 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80010e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010f4:	230a      	movs	r3, #10
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f001 fb88 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pull_up_Test_Pin */
  GPIO_InitStruct.Pin = Pull_up_Test_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Pull_up_Test_GPIO_Port, &GPIO_InitStruct);
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	480b      	ldr	r0, [pc, #44]	@ (8001148 <MX_GPIO_Init+0xc4>)
 800111c:	f001 fb7a 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001120:	23c0      	movs	r3, #192	@ 0xc0
 8001122:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001130:	2307      	movs	r3, #7
 8001132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <MX_GPIO_Init+0xc8>)
 800113a:	f001 fb6b 	bl	8002814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	48000800 	.word	0x48000800
 800114c:	48000400 	.word	0x48000400

08001150 <Send_Address_Claim_Broadcast>:

/* USER CODE BEGIN 4 */
void Send_Address_Claim_Broadcast(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
    uCAN_MSG txMessage;
    txMessage.frame.idType = CAN_FRAME_EXT;
 8001156:	2302      	movs	r3, #2
 8001158:	713b      	strb	r3, [r7, #4]
    txMessage.frame.id = 0x18EEFF80 | MODULE_NUMBER;  // The last byte is the source address (MODULE_NUMBER)
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <Send_Address_Claim_Broadcast+0x44>)
 800115c:	60bb      	str	r3, [r7, #8]
    txMessage.frame.dlc = 8;
 800115e:	2308      	movs	r3, #8
 8001160:	733b      	strb	r3, [r7, #12]

    txMessage.frame.data0 = 0xF3;                                  // Unique identifier
 8001162:	23f3      	movs	r3, #243	@ 0xf3
 8001164:	737b      	strb	r3, [r7, #13]
    txMessage.frame.data1 = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
    txMessage.frame.data2 = 0x80;
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	73fb      	strb	r3, [r7, #15]
    txMessage.frame.data3 = BMS_TARGET_ADDRESS;                    // BMS Target Address (default 0x80)
 800116e:	23f3      	movs	r3, #243	@ 0xf3
 8001170:	743b      	strb	r3, [r7, #16]
    txMessage.frame.data4 = MODULE_NUMBER << 3;                    // Thermistor Module Number shifted left by 3
 8001172:	2300      	movs	r3, #0
 8001174:	747b      	strb	r3, [r7, #17]
    txMessage.frame.data5 = 0x40;                                  // Constant
 8001176:	2340      	movs	r3, #64	@ 0x40
 8001178:	74bb      	strb	r3, [r7, #18]
    txMessage.frame.data6 = 0x1E;                                  // Constant
 800117a:	231e      	movs	r3, #30
 800117c:	74fb      	strb	r3, [r7, #19]
    txMessage.frame.data7 = 0x90;                                  // Constant
 800117e:	2390      	movs	r3, #144	@ 0x90
 8001180:	753b      	strb	r3, [r7, #20]
                                // Unused or default value

    // Transmit the CAN message
    if (CANSPI_Transmit(&txMessage) != 0)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f8a9 	bl	80002dc <CANSPI_Transmit>
    {
        // Handle transmission error if needed
    }
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	18eeff80 	.word	0x18eeff80

08001198 <Send_Thermistor_Module_Broadcast>:

void Send_Thermistor_Module_Broadcast(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
    uCAN_MSG txMessage;
    txMessage.frame.idType = CAN_FRAME_EXT;
 800119e:	2302      	movs	r3, #2
 80011a0:	713b      	strb	r3, [r7, #4]
    txMessage.frame.id = 0x1839F380 | MODULE_NUMBER;  // Source address is module number
 80011a2:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <Send_Thermistor_Module_Broadcast+0x118>)
 80011a4:	60bb      	str	r3, [r7, #8]
    txMessage.frame.dlc = 8;
 80011a6:	2308      	movs	r3, #8
 80011a8:	733b      	strb	r3, [r7, #12]

    int8_t lowest_temp = thermistor_values[0];
 80011aa:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int8_t highest_temp = thermistor_values[0];
 80011b2:	4b40      	ldr	r3, [pc, #256]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int32_t sum_temp = thermistor_values[0];
 80011ba:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011bc:	f993 3000 	ldrsb.w	r3, [r3]
 80011c0:	623b      	str	r3, [r7, #32]
    uint8_t lowest_temp_id = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
    uint8_t highest_temp_id = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	77bb      	strb	r3, [r7, #30]

    for (uint8_t i = 1; i < NUM_THERMISTORS; i++)
 80011ca:	2301      	movs	r3, #1
 80011cc:	777b      	strb	r3, [r7, #29]
 80011ce:	e025      	b.n	800121c <Send_Thermistor_Module_Broadcast+0x84>
    {
        if (thermistor_values[i] < lowest_temp)
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	4a38      	ldr	r2, [pc, #224]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011d4:	56d3      	ldrsb	r3, [r2, r3]
 80011d6:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd06      	ble.n	80011ec <Send_Thermistor_Module_Broadcast+0x54>
        {
            lowest_temp = thermistor_values[i];
 80011de:	7f7b      	ldrb	r3, [r7, #29]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            lowest_temp_id = i;
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	77fb      	strb	r3, [r7, #31]
        }
        if (thermistor_values[i] > highest_temp)
 80011ec:	7f7b      	ldrb	r3, [r7, #29]
 80011ee:	4a31      	ldr	r2, [pc, #196]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011f0:	56d3      	ldrsb	r3, [r2, r3]
 80011f2:	f997 2026 	ldrsb.w	r2, [r7, #38]	@ 0x26
 80011f6:	429a      	cmp	r2, r3
 80011f8:	da06      	bge.n	8001208 <Send_Thermistor_Module_Broadcast+0x70>
        {
            highest_temp = thermistor_values[i];
 80011fa:	7f7b      	ldrb	r3, [r7, #29]
 80011fc:	4a2d      	ldr	r2, [pc, #180]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            highest_temp_id = i;
 8001204:	7f7b      	ldrb	r3, [r7, #29]
 8001206:	77bb      	strb	r3, [r7, #30]
        }
        sum_temp += thermistor_values[i];
 8001208:	7f7b      	ldrb	r3, [r7, #29]
 800120a:	4a2a      	ldr	r2, [pc, #168]	@ (80012b4 <Send_Thermistor_Module_Broadcast+0x11c>)
 800120c:	56d3      	ldrsb	r3, [r2, r3]
 800120e:	461a      	mov	r2, r3
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	4413      	add	r3, r2
 8001214:	623b      	str	r3, [r7, #32]
    for (uint8_t i = 1; i < NUM_THERMISTORS; i++)
 8001216:	7f7b      	ldrb	r3, [r7, #29]
 8001218:	3301      	adds	r3, #1
 800121a:	777b      	strb	r3, [r7, #29]
 800121c:	7f7b      	ldrb	r3, [r7, #29]
 800121e:	2b07      	cmp	r3, #7
 8001220:	d9d6      	bls.n	80011d0 <Send_Thermistor_Module_Broadcast+0x38>
    }

    txMessage.frame.data0 = MODULE_NUMBER;
 8001222:	2300      	movs	r3, #0
 8001224:	737b      	strb	r3, [r7, #13]
    txMessage.frame.data1 = lowest_temp;                              // Lowest temperature
 8001226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800122a:	73bb      	strb	r3, [r7, #14]
    txMessage.frame.data2 = highest_temp;                             // Highest temperature
 800122c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001230:	73fb      	strb	r3, [r7, #15]
    txMessage.frame.data3 = (int8_t)(sum_temp / NUM_THERMISTORS);     // Average temperature
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da00      	bge.n	800123a <Send_Thermistor_Module_Broadcast+0xa2>
 8001238:	3307      	adds	r3, #7
 800123a:	10db      	asrs	r3, r3, #3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	743b      	strb	r3, [r7, #16]
    txMessage.frame.data4 = NUM_THERMISTORS;                          // Number of thermistors enabled
 8001240:	2308      	movs	r3, #8
 8001242:	747b      	strb	r3, [r7, #17]
    txMessage.frame.data5 = highest_temp_id;                          // Highest thermistor ID
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	74bb      	strb	r3, [r7, #18]
    txMessage.frame.data6 = lowest_temp_id;                           // Lowest thermistor ID
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	74fb      	strb	r3, [r7, #19]

    // Calculate checksum
    uint16_t sum = 0x39 + txMessage.frame.dlc;  // Start with 0x39 and length
 800124c:	7b3b      	ldrb	r3, [r7, #12]
 800124e:	3339      	adds	r3, #57	@ 0x39
 8001250:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data0;
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	461a      	mov	r2, r3
 8001256:	8b7b      	ldrh	r3, [r7, #26]
 8001258:	4413      	add	r3, r2
 800125a:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data1;
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	461a      	mov	r2, r3
 8001260:	8b7b      	ldrh	r3, [r7, #26]
 8001262:	4413      	add	r3, r2
 8001264:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data2;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	461a      	mov	r2, r3
 800126a:	8b7b      	ldrh	r3, [r7, #26]
 800126c:	4413      	add	r3, r2
 800126e:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data3;
 8001270:	7c3b      	ldrb	r3, [r7, #16]
 8001272:	461a      	mov	r2, r3
 8001274:	8b7b      	ldrh	r3, [r7, #26]
 8001276:	4413      	add	r3, r2
 8001278:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data4;
 800127a:	7c7b      	ldrb	r3, [r7, #17]
 800127c:	461a      	mov	r2, r3
 800127e:	8b7b      	ldrh	r3, [r7, #26]
 8001280:	4413      	add	r3, r2
 8001282:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data5;
 8001284:	7cbb      	ldrb	r3, [r7, #18]
 8001286:	461a      	mov	r2, r3
 8001288:	8b7b      	ldrh	r3, [r7, #26]
 800128a:	4413      	add	r3, r2
 800128c:	837b      	strh	r3, [r7, #26]
    sum += txMessage.frame.data6;
 800128e:	7cfb      	ldrb	r3, [r7, #19]
 8001290:	461a      	mov	r2, r3
 8001292:	8b7b      	ldrh	r3, [r7, #26]
 8001294:	4413      	add	r3, r2
 8001296:	837b      	strh	r3, [r7, #26]
    txMessage.frame.data7 = (uint8_t)(sum & 0xFF);  // Checksum is lower 8 bits
 8001298:	8b7b      	ldrh	r3, [r7, #26]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	753b      	strb	r3, [r7, #20]

    // Transmit the CAN message
    if (CANSPI_Transmit(&txMessage) != 0)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f81b 	bl	80002dc <CANSPI_Transmit>
    {
        // Handle transmission error if needed
    }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	1839f380 	.word	0x1839f380
 80012b4:	200002a4 	.word	0x200002a4

080012b8 <Send_Thermistor_General_Broadcast>:


/* Implement Send_Thermistor_General_Broadcast as before */
void Send_Thermistor_General_Broadcast(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
    static uint8_t thermistor_index = 0;  // Keep track of which thermistor to send

    uCAN_MSG txMessage;
    txMessage.frame.idType = CAN_FRAME_EXT;
 80012be:	2302      	movs	r3, #2
 80012c0:	703b      	strb	r3, [r7, #0]
    txMessage.frame.id = 0x1838F380 | MODULE_NUMBER;  // Source address is module number
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <Send_Thermistor_General_Broadcast+0xe0>)
 80012c4:	607b      	str	r3, [r7, #4]
    txMessage.frame.dlc = 8;
 80012c6:	2308      	movs	r3, #8
 80012c8:	723b      	strb	r3, [r7, #8]

    // Calculate Thermistor ID relative to all configured modules
    uint8_t thermistor_id_all = MODULE_NUMBER * NUM_THERMISTORS + thermistor_index;
 80012ca:	4b34      	ldr	r3, [pc, #208]	@ (800139c <Send_Thermistor_General_Broadcast+0xe4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	753b      	strb	r3, [r7, #20]
    int8_t lowest_temp = thermistor_values[0];
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	77fb      	strb	r3, [r7, #31]
    int8_t highest_temp = thermistor_values[0];
 80012d6:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	77bb      	strb	r3, [r7, #30]
    int32_t sum_temp = thermistor_values[0];
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 80012de:	f993 3000 	ldrsb.w	r3, [r3]
 80012e2:	61bb      	str	r3, [r7, #24]
    uint8_t lowest_temp_id = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]
    uint8_t highest_temp_id = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	75bb      	strb	r3, [r7, #22]

    for (uint8_t i = 1; i < NUM_THERMISTORS; i++)
 80012ec:	2301      	movs	r3, #1
 80012ee:	757b      	strb	r3, [r7, #21]
 80012f0:	e023      	b.n	800133a <Send_Thermistor_General_Broadcast+0x82>
    {
        if (thermistor_values[i] < lowest_temp)
 80012f2:	7d7b      	ldrb	r3, [r7, #21]
 80012f4:	4a2a      	ldr	r2, [pc, #168]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 80012f6:	56d3      	ldrsb	r3, [r2, r3]
 80012f8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dd05      	ble.n	800130c <Send_Thermistor_General_Broadcast+0x54>
        {
            lowest_temp = thermistor_values[i];
 8001300:	7d7b      	ldrb	r3, [r7, #21]
 8001302:	4a27      	ldr	r2, [pc, #156]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	77fb      	strb	r3, [r7, #31]
            lowest_temp_id = i;
 8001308:	7d7b      	ldrb	r3, [r7, #21]
 800130a:	75fb      	strb	r3, [r7, #23]
        }
        if (thermistor_values[i] > highest_temp)
 800130c:	7d7b      	ldrb	r3, [r7, #21]
 800130e:	4a24      	ldr	r2, [pc, #144]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 8001310:	56d3      	ldrsb	r3, [r2, r3]
 8001312:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8001316:	429a      	cmp	r2, r3
 8001318:	da05      	bge.n	8001326 <Send_Thermistor_General_Broadcast+0x6e>
        {
            highest_temp = thermistor_values[i];
 800131a:	7d7b      	ldrb	r3, [r7, #21]
 800131c:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	77bb      	strb	r3, [r7, #30]
            highest_temp_id = i;
 8001322:	7d7b      	ldrb	r3, [r7, #21]
 8001324:	75bb      	strb	r3, [r7, #22]
        }
        sum_temp += thermistor_values[i];
 8001326:	7d7b      	ldrb	r3, [r7, #21]
 8001328:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 800132a:	56d3      	ldrsb	r3, [r2, r3]
 800132c:	461a      	mov	r2, r3
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4413      	add	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 1; i < NUM_THERMISTORS; i++)
 8001334:	7d7b      	ldrb	r3, [r7, #21]
 8001336:	3301      	adds	r3, #1
 8001338:	757b      	strb	r3, [r7, #21]
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	2b07      	cmp	r3, #7
 800133e:	d9d8      	bls.n	80012f2 <Send_Thermistor_General_Broadcast+0x3a>
    }

    txMessage.frame.data0 = thermistor_id_all;
 8001340:	7d3b      	ldrb	r3, [r7, #20]
 8001342:	727b      	strb	r3, [r7, #9]
    txMessage.frame.data1 = thermistor_id_all;
 8001344:	7d3b      	ldrb	r3, [r7, #20]
 8001346:	72bb      	strb	r3, [r7, #10]
    txMessage.frame.data2 = thermistor_values[thermistor_index];  // Temperature in °C
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <Send_Thermistor_General_Broadcast+0xe4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <Send_Thermistor_General_Broadcast+0xe8>)
 8001350:	569b      	ldrsb	r3, [r3, r2]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	72fb      	strb	r3, [r7, #11]
    txMessage.frame.data3 = thermistor_index;                     // Thermistor ID relative to this module
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <Send_Thermistor_General_Broadcast+0xe4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	733b      	strb	r3, [r7, #12]
    txMessage.frame.data4 = lowest_temp;  // Current temperature
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	737b      	strb	r3, [r7, #13]
    txMessage.frame.data5 = highest_temp;  // Can be used for other data
 8001360:	7fbb      	ldrb	r3, [r7, #30]
 8001362:	73bb      	strb	r3, [r7, #14]
    txMessage.frame.data6 = highest_temp_id;                // Highest thermistor ID
 8001364:	7dbb      	ldrb	r3, [r7, #22]
 8001366:	73fb      	strb	r3, [r7, #15]
    txMessage.frame.data7 = lowest_temp_id;                 // Lowest thermistor ID
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	743b      	strb	r3, [r7, #16]

    // Update thermistor_index for next call
    thermistor_index = (thermistor_index + 1) % NUM_THERMISTORS;
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <Send_Thermistor_General_Broadcast+0xe4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	425a      	negs	r2, r3
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	f002 0207 	and.w	r2, r2, #7
 800137c:	bf58      	it	pl
 800137e:	4253      	negpl	r3, r2
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <Send_Thermistor_General_Broadcast+0xe4>)
 8001384:	701a      	strb	r2, [r3, #0]

    // Transmit the CAN message
    if (CANSPI_Transmit(&txMessage) != 0)
 8001386:	463b      	mov	r3, r7
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ffa7 	bl	80002dc <CANSPI_Transmit>
    {
        // Handle transmission error if needed
    }
}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	1838f380 	.word	0x1838f380
 800139c:	200002dc 	.word	0x200002dc
 80013a0:	200002a4 	.word	0x200002a4

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <Error_Handler+0x8>

080013b0 <LL_AHB2_GRP1_EnableClock>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4013      	ands	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001420:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001430:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001452:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4313      	orrs	r3, r2
 800145c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001462:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4013      	ands	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b09c      	sub	sp, #112	@ 0x70
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2250      	movs	r2, #80	@ 0x50
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 fe6d 	bl	8006188 <memset>
  if(hadc->Instance==ADC1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <HAL_ADC_MspInit+0x9c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d130      	bne.n	800151a <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80014be:	2318      	movs	r3, #24
 80014c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80014c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80014c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80014ce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80014d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fc8c 	bl	8004e02 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 80014f0:	f7ff ff58 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014f8:	f7ff ff5a 	bl	80013b0 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	2004      	movs	r0, #4
 80014fe:	f7ff ff57 	bl	80013b0 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001502:	2303      	movs	r3, #3
 8001504:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001512:	4619      	mov	r1, r3
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <HAL_ADC_MspInit+0xa0>)
 8001516:	f001 f97d 	bl	8002814 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800151a:	bf00      	nop
 800151c:	3770      	adds	r7, #112	@ 0x70
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	50040000 	.word	0x50040000
 8001528:	48000800 	.word	0x48000800

0800152c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09c      	sub	sp, #112	@ 0x70
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2250      	movs	r2, #80	@ 0x50
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fe1b 	bl	8006188 <memset>
  if(hi2c->Instance==I2C1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_I2C_MspInit+0x88>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d126      	bne.n	80015aa <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001560:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fc49 	bl	8004e02 <HAL_RCCEx_PeriphCLKConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001576:	f7ff ff15 	bl	80013a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2002      	movs	r0, #2
 800157c:	f7ff ff18 	bl	80013b0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001580:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001584:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158a:	2301      	movs	r3, #1
 800158c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001592:	2304      	movs	r3, #4
 8001594:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800159a:	4619      	mov	r1, r3
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <HAL_I2C_MspInit+0x8c>)
 800159e:	f001 f939 	bl	8002814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015a6:	f7ff ff35 	bl	8001414 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3770      	adds	r7, #112	@ 0x70
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40005400 	.word	0x40005400
 80015b8:	48000400 	.word	0x48000400

080015bc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <HAL_IPCC_MspInit+0x24>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d103      	bne.n	80015d6 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80015ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80015d2:	f7ff ff06 	bl	80013e2 <LL_AHB3_GRP1_EnableClock>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	58000c00 	.word	0x58000c00

080015e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <HAL_SPI_MspInit+0x5c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d117      	bne.n	8001636 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001606:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800160a:	f7ff ff1c 	bl	8001446 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fece 	bl	80013b0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001614:	23e0      	movs	r3, #224	@ 0xe0
 8001616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001624:	2305      	movs	r3, #5
 8001626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f001 f8ef 	bl	8002814 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013000 	.word	0x40013000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169a:	f000 f8e9 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <SystemInit+0x98>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	4a23      	ldr	r2, [pc, #140]	@ (800173c <SystemInit+0x98>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016cc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80016d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <SystemInit+0x9c>)
 80016de:	4013      	ands	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ee:	f023 0305 	bic.w	r3, r3, #5
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800170a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170e:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <SystemInit+0xa0>)
 8001710:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <SystemInit+0xa0>)
 8001718:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001724:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001728:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	faf6fefb 	.word	0xfaf6fefb
 8001744:	22041000 	.word	0x22041000

08001748 <CopyDataInit>:
 8001748:	58d4      	ldr	r4, [r2, r3]
 800174a:	50c4      	str	r4, [r0, r3]
 800174c:	3304      	adds	r3, #4

0800174e <LoopCopyDataInit>:
 800174e:	18c4      	adds	r4, r0, r3
 8001750:	428c      	cmp	r4, r1
 8001752:	d3f9      	bcc.n	8001748 <CopyDataInit>
 8001754:	4770      	bx	lr

08001756 <FillZerobss>:
 8001756:	6003      	str	r3, [r0, #0]
 8001758:	3004      	adds	r0, #4

0800175a <LoopFillZerobss>:
 800175a:	4288      	cmp	r0, r1
 800175c:	d3fb      	bcc.n	8001756 <FillZerobss>
 800175e:	4770      	bx	lr

08001760 <Reset_Handler>:
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <LoopForever+0x2>)
 8001762:	4685      	mov	sp, r0
 8001764:	f7ff ff9e 	bl	80016a4 <SystemInit>
 8001768:	480b      	ldr	r0, [pc, #44]	@ (8001798 <LoopForever+0x6>)
 800176a:	490c      	ldr	r1, [pc, #48]	@ (800179c <LoopForever+0xa>)
 800176c:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <LoopForever+0xe>)
 800176e:	2300      	movs	r3, #0
 8001770:	f7ff ffed 	bl	800174e <LoopCopyDataInit>
 8001774:	480b      	ldr	r0, [pc, #44]	@ (80017a4 <LoopForever+0x12>)
 8001776:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <LoopForever+0x16>)
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <LoopForever+0x1a>)
 800177a:	2300      	movs	r3, #0
 800177c:	f7ff ffe7 	bl	800174e <LoopCopyDataInit>
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <LoopForever+0x1e>)
 8001782:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <LoopForever+0x22>)
 8001784:	2300      	movs	r3, #0
 8001786:	f7ff ffe8 	bl	800175a <LoopFillZerobss>
 800178a:	f004 fd05 	bl	8006198 <__libc_init_array>
 800178e:	f7ff fa5d 	bl	8000c4c <main>

08001792 <LoopForever>:
 8001792:	e7fe      	b.n	8001792 <LoopForever>
 8001794:	20030000 	.word	0x20030000
 8001798:	20000008 	.word	0x20000008
 800179c:	20000128 	.word	0x20000128
 80017a0:	080062ac 	.word	0x080062ac
 80017a4:	20030000 	.word	0x20030000
 80017a8:	20030000 	.word	0x20030000
 80017ac:	080063cc 	.word	0x080063cc
 80017b0:	20000128 	.word	0x20000128
 80017b4:	200002e4 	.word	0x200002e4

080017b8 <ADC1_IRQHandler>:
 80017b8:	e7fe      	b.n	80017b8 <ADC1_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_Init+0x3c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x3c>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d2:	2003      	movs	r0, #3
 80017d4:	f000 ffec 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 f80f 	bl	80017fc <HAL_InitTick>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	e001      	b.n	80017ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ea:	f7ff fe45 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	58004000 	.word	0x58004000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <HAL_InitTick+0x6c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d024      	beq.n	800185a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001810:	f003 f892 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_InitTick+0x6c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001820:	fbb3 f3f1 	udiv	r3, r3, r1
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	4618      	mov	r0, r3
 800182a:	f000 ffe6 	bl	80027fa <HAL_SYSTICK_Config>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10f      	bne.n	8001854 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	d809      	bhi.n	800184e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183a:	2200      	movs	r2, #0
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	f04f 30ff 	mov.w	r0, #4294967295
 8001842:	f000 ffc0 	bl	80027c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <HAL_InitTick+0x70>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e007      	b.n	800185e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e004      	b.n	800185e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e001      	b.n	800185e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000124 	.word	0x20000124
 800186c:	20000120 	.word	0x20000120

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000124 	.word	0x20000124
 8001894:	200002e0 	.word	0x200002e0

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200002e0 	.word	0x200002e0

080018b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <HAL_GetTickPrio+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000120 	.word	0x20000120

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffe2 	bl	8001898 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffd2 	bl	8001898 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000124 	.word	0x20000124

08001910 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3360      	adds	r3, #96	@ 0x60
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <LL_ADC_SetOffset+0x44>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b0:	bf00      	nop
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	03fff000 	.word	0x03fff000

080019c0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3360      	adds	r3, #96	@ 0x60
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3360      	adds	r3, #96	@ 0x60
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3330      	adds	r3, #48	@ 0x30
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	211f      	movs	r1, #31
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 011f 	and.w	r1, r3, #31
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b087      	sub	sp, #28
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3314      	adds	r3, #20
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0e5b      	lsrs	r3, r3, #25
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	0d1b      	lsrs	r3, r3, #20
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	2107      	movs	r1, #7
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	0d1b      	lsrs	r3, r3, #20
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0318 	and.w	r3, r3, #24
 8001af2:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001af4:	40d9      	lsrs	r1, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	400b      	ands	r3, r1
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	0007ffff 	.word	0x0007ffff

08001b18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6093      	str	r3, [r2, #8]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <LL_ADC_IsEnabled+0x18>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <LL_ADC_IsEnabled+0x1a>
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d101      	bne.n	8001c18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e12e      	b.n	8001ea4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fc17 	bl	8001488 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff65 	bl	8001b3c <LL_ADC_IsDeepPowerDownEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff4b 	bl	8001b18 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff80 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff64 	bl	8001b64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9c:	4b83      	ldr	r3, [pc, #524]	@ (8001eac <HAL_ADC_Init+0x284>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	4a83      	ldr	r2, [pc, #524]	@ (8001eb0 <HAL_ADC_Init+0x288>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff62 	bl	8001b8c <LL_ADC_IsInternalRegulatorEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10d      	bne.n	8001cea <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff73 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001cf4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 80c7 	bne.w	8001e92 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80c3 	bne.w	8001e92 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d14:	f043 0202 	orr.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff47 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2c:	4861      	ldr	r0, [pc, #388]	@ (8001eb4 <HAL_ADC_Init+0x28c>)
 8001d2e:	f7ff ff41 	bl	8001bb4 <LL_ADC_IsEnabled>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	485e      	ldr	r0, [pc, #376]	@ (8001eb8 <HAL_ADC_Init+0x290>)
 8001d40:	f7ff fde6 	bl	8001910 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e5b      	ldrb	r3, [r3, #25]
 8001d48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d62:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001d64:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	045b      	lsls	r3, r3, #17
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <HAL_ADC_Init+0x294>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff0e 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff1b 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 8001dca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13d      	bne.n	8001e4e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13a      	bne.n	8001e4e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ddc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001de4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001df4:	f023 0302 	bic.w	r3, r3, #2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d118      	bne.n	8001e3e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	e007      	b.n	8001e4e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10c      	bne.n	8001e70 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f023 010f 	bic.w	r1, r3, #15
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	1e5a      	subs	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e6e:	e007      	b.n	8001e80 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020f 	bic.w	r2, r2, #15
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f023 0303 	bic.w	r3, r3, #3
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e90:	e007      	b.n	8001ea2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000011c 	.word	0x2000011c
 8001eb0:	053e2d63 	.word	0x053e2d63
 8001eb4:	50040000 	.word	0x50040000
 8001eb8:	50040300 	.word	0x50040300
 8001ebc:	fff0c007 	.word	0xfff0c007

08001ec0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0b6      	sub	sp, #216	@ 0xd8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x22>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e39f      	b.n	8002622 <HAL_ADC_ConfigChannel+0x762>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fe73 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8384 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f7ff fd8a 	bl	8001a22 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fe61 	bl	8001bda <LL_ADC_REG_IsConversionOngoing>
 8001f18:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fe6d 	bl	8001c00 <LL_ADC_INJ_IsConversionOngoing>
 8001f26:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 81a6 	bne.w	8002280 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 81a1 	bne.w	8002280 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	f7ff fd95 	bl	8001a7a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d00a      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f82:	f7ff fcf9 	bl	8001978 <LL_ADC_SetOffset>
 8001f86:	e17b      	b.n	8002280 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fd16 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0xf4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fd0b 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	f003 021f 	and.w	r2, r3, #31
 8001fb2:	e01e      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x132>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fd00 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e004      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001fe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_ADC_ConfigChannel+0x14a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	e018      	b.n	800203c <HAL_ADC_ConfigChannel+0x17c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800201e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800202e:	2320      	movs	r3, #32
 8002030:	e004      	b.n	800203c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fccf 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fcb3 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <HAL_ADC_ConfigChannel+0x1ba>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fca8 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002070:	4603      	mov	r3, r0
 8002072:	0e9b      	lsrs	r3, r3, #26
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	e01e      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x1f8>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fc9d 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800209c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e004      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x210>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	e018      	b.n	8002102 <HAL_ADC_ConfigChannel+0x242>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80020e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80020ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e004      	b.n	8002102 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80020f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	429a      	cmp	r2, r3
 8002104:	d106      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	2101      	movs	r1, #1
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fc6c 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2102      	movs	r1, #2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fc50 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x280>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fc45 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 021f 	and.w	r2, r3, #31
 800213e:	e01e      	b.n	800217e <HAL_ADC_ConfigChannel+0x2be>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2102      	movs	r1, #2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fc3a 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800215e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002166:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e004      	b.n	800217c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x2d6>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	e016      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x304>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e004      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80021ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2102      	movs	r1, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fc0b 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2103      	movs	r1, #3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fbef 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x342>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2103      	movs	r1, #3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fbe4 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	e017      	b.n	8002232 <HAL_ADC_ConfigChannel+0x372>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2103      	movs	r1, #3
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fbd9 	bl	80019c0 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800221a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800221c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800221e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_ConfigChannel+0x38a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	e011      	b.n	800226e <HAL_ADC_ConfigChannel+0x3ae>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800225a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800225c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e003      	b.n	800226e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d106      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	2103      	movs	r1, #3
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fbb6 	bl	80019ec <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fc95 	bl	8001bb4 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 81c2 	bne.w	8002616 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7ff fc16 	bl	8001ad0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a8e      	ldr	r2, [pc, #568]	@ (80024e4 <HAL_ADC_ConfigChannel+0x624>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	f040 8130 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x418>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	bf94      	ite	ls
 80022d0:	2301      	movls	r3, #1
 80022d2:	2300      	movhi	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e019      	b.n	800230c <HAL_ADC_ConfigChannel+0x44c>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80022e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80022ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80022f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2b09      	cmp	r3, #9
 8002304:	bf94      	ite	ls
 8002306:	2301      	movls	r3, #1
 8002308:	2300      	movhi	r3, #0
 800230a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230c:	2b00      	cmp	r3, #0
 800230e:	d079      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_ADC_ConfigChannel+0x46c>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	069b      	lsls	r3, r3, #26
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800232a:	e015      	b.n	8002358 <HAL_ADC_ConfigChannel+0x498>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800233a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800233c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800233e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4b8>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	e017      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x4e8>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002388:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800238a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	ea42 0103 	orr.w	r1, r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x50e>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	051b      	lsls	r3, r3, #20
 80023cc:	e018      	b.n	8002400 <HAL_ADC_ConfigChannel+0x540>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80023e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002400:	430b      	orrs	r3, r1
 8002402:	e080      	b.n	8002506 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x560>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	069b      	lsls	r3, r3, #26
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800241e:	e015      	b.n	800244c <HAL_ADC_ConfigChannel+0x58c>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_ConfigChannel+0x5ac>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	e017      	b.n	800249c <HAL_ADC_ConfigChannel+0x5dc>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	61fb      	str	r3, [r7, #28]
  return result;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x608>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	3b1e      	subs	r3, #30
 80024c0:	051b      	lsls	r3, r3, #20
 80024c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	e01d      	b.n	8002504 <HAL_ADC_ConfigChannel+0x644>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	613b      	str	r3, [r7, #16]
  return result;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e005      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x630>
 80024e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	051b      	lsls	r3, r3, #20
 8002500:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002504:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff fab5 	bl	8001a7a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b45      	ldr	r3, [pc, #276]	@ (800262c <HAL_ADC_ConfigChannel+0x76c>)
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d07c      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251c:	4844      	ldr	r0, [pc, #272]	@ (8002630 <HAL_ADC_ConfigChannel+0x770>)
 800251e:	f7ff fa1d 	bl	800195c <LL_ADC_GetCommonPathInternalCh>
 8002522:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002526:	4843      	ldr	r0, [pc, #268]	@ (8002634 <HAL_ADC_ConfigChannel+0x774>)
 8002528:	f7ff fb44 	bl	8001bb4 <LL_ADC_IsEnabled>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d15e      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a40      	ldr	r2, [pc, #256]	@ (8002638 <HAL_ADC_ConfigChannel+0x778>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d127      	bne.n	800258c <HAL_ADC_ConfigChannel+0x6cc>
 800253c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d121      	bne.n	800258c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a39      	ldr	r2, [pc, #228]	@ (8002634 <HAL_ADC_ConfigChannel+0x774>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d161      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002552:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002556:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800255a:	4619      	mov	r1, r3
 800255c:	4834      	ldr	r0, [pc, #208]	@ (8002630 <HAL_ADC_ConfigChannel+0x770>)
 800255e:	f7ff f9ea 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002562:	4b36      	ldr	r3, [pc, #216]	@ (800263c <HAL_ADC_ConfigChannel+0x77c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	4a35      	ldr	r2, [pc, #212]	@ (8002640 <HAL_ADC_ConfigChannel+0x780>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3b01      	subs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800258a:	e044      	b.n	8002616 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2c      	ldr	r2, [pc, #176]	@ (8002644 <HAL_ADC_ConfigChannel+0x784>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d113      	bne.n	80025be <HAL_ADC_ConfigChannel+0x6fe>
 8002596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800259a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <HAL_ADC_ConfigChannel+0x774>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d134      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	4619      	mov	r1, r3
 80025b6:	481e      	ldr	r0, [pc, #120]	@ (8002630 <HAL_ADC_ConfigChannel+0x770>)
 80025b8:	f7ff f9bd 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025bc:	e02b      	b.n	8002616 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a21      	ldr	r2, [pc, #132]	@ (8002648 <HAL_ADC_ConfigChannel+0x788>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d126      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x756>
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a16      	ldr	r2, [pc, #88]	@ (8002634 <HAL_ADC_ConfigChannel+0x774>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11b      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e6:	4619      	mov	r1, r3
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <HAL_ADC_ConfigChannel+0x770>)
 80025ea:	f7ff f9a4 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
 80025ee:	e012      	b.n	8002616 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f043 0220 	orr.w	r2, r3, #32
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002602:	e008      	b.n	8002616 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800261e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d8      	adds	r7, #216	@ 0xd8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	80080000 	.word	0x80080000
 8002630:	50040300 	.word	0x50040300
 8002634:	50040000 	.word	0x50040000
 8002638:	c7520000 	.word	0xc7520000
 800263c:	2000011c 	.word	0x2000011c
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	cb840000 	.word	0xcb840000
 8002648:	80000001 	.word	0x80000001

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	@ (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	@ (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	@ 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	@ 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff47 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff5e 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff90 	bl	8002704 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5f 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffb2 	bl	800276c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002822:	e14c      	b.n	8002abe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 813e 	beq.w	8002ab8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d005      	beq.n	8002854 <HAL_GPIO_Init+0x40>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d130      	bne.n	80028b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288a:	2201      	movs	r2, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0201 	and.w	r2, r3, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d017      	beq.n	80028f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d123      	bne.n	8002946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	6939      	ldr	r1, [r7, #16]
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8098 	beq.w	8002ab8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002988:	4a54      	ldr	r2, [pc, #336]	@ (8002adc <HAL_GPIO_Init+0x2c8>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029b2:	d019      	beq.n	80029e8 <HAL_GPIO_Init+0x1d4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae0 <HAL_GPIO_Init+0x2cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1d0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a49      	ldr	r2, [pc, #292]	@ (8002ae4 <HAL_GPIO_Init+0x2d0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1cc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a48      	ldr	r2, [pc, #288]	@ (8002ae8 <HAL_GPIO_Init+0x2d4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1c8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a47      	ldr	r2, [pc, #284]	@ (8002aec <HAL_GPIO_Init+0x2d8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1c4>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e008      	b.n	80029ea <HAL_GPIO_Init+0x1d6>
 80029d8:	2307      	movs	r3, #7
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x1d6>
 80029dc:	2303      	movs	r3, #3
 80029de:	e004      	b.n	80029ea <HAL_GPIO_Init+0x1d6>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x1d6>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_Init+0x1d6>
 80029e8:	2300      	movs	r3, #0
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4093      	lsls	r3, r2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029fa:	4938      	ldr	r1, [pc, #224]	@ (8002adc <HAL_GPIO_Init+0x2c8>)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a08:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a2c:	4a30      	ldr	r2, [pc, #192]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a32:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a56:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a8a:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_GPIO_Init+0x2dc>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f aeab 	bne.w	8002824 <HAL_GPIO_Init+0x10>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	48000400 	.word	0x48000400
 8002ae4:	48000800 	.word	0x48000800
 8002ae8:	48000c00 	.word	0x48000c00
 8002aec:	48001000 	.word	0x48001000
 8002af0:	58000800 	.word	0x58000800

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e08d      	b.n	8002c52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fcee 	bl	800152c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e006      	b.n	8002bac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d108      	bne.n	8002bc6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e007      	b.n	8002bd6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 80fd 	bne.w	8002e78 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_Master_Transmit+0x30>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0f6      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c94:	f7fe fe00 	bl	8001898 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2319      	movs	r3, #25
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fa0a 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0e1      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2221      	movs	r2, #33	@ 0x21
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2bff      	cmp	r3, #255	@ 0xff
 8002ce6:	d906      	bls.n	8002cf6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	@ 0xff
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e007      	b.n	8002d06 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d04:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d024      	beq.n	8002d58 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <HAL_I2C_Master_Transmit+0x228>)
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc05 	bl	8003560 <I2C_TransferConfig>
 8002d56:	e066      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	8979      	ldrh	r1, [r7, #10]
 8002d60:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <HAL_I2C_Master_Transmit+0x228>)
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fbfa 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d6c:	e05b      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	6a39      	ldr	r1, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f9fd 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07b      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d034      	beq.n	8002e26 <HAL_I2C_Master_Transmit+0x1ca>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d130      	bne.n	8002e26 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f976 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e04d      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2bff      	cmp	r3, #255	@ 0xff
 8002de6:	d90e      	bls.n	8002e06 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	22ff      	movs	r2, #255	@ 0xff
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fbae 	bl	8003560 <I2C_TransferConfig>
 8002e04:	e00f      	b.n	8002e26 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb9d 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d19e      	bne.n	8002d6e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	6a39      	ldr	r1, [r7, #32]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f9e3 	bl	8003200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e01a      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_I2C_Master_Transmit+0x22c>)
 8002e58:	400b      	ands	r3, r1
 8002e5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	80002000 	.word	0x80002000
 8002e88:	fe00e800 	.word	0xfe00e800

08002e8c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	461a      	mov	r2, r3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	817b      	strh	r3, [r7, #10]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	f040 80db 	bne.w	8003064 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Master_Receive+0x30>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0d4      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fce8 	bl	8001898 <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2319      	movs	r3, #25
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8f2 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0bf      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2222      	movs	r2, #34	@ 0x22
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	893a      	ldrh	r2, [r7, #8]
 8002f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2bff      	cmp	r3, #255	@ 0xff
 8002f16:	d90e      	bls.n	8002f36 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	22ff      	movs	r2, #255	@ 0xff
 8002f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	4b52      	ldr	r3, [pc, #328]	@ (8003070 <HAL_I2C_Master_Receive+0x1e4>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fb16 	bl	8003560 <I2C_TransferConfig>
 8002f34:	e06d      	b.n	8003012 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	4b49      	ldr	r3, [pc, #292]	@ (8003070 <HAL_I2C_Master_Receive+0x1e4>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fb05 	bl	8003560 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f56:	e05c      	b.n	8003012 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	6a39      	ldr	r1, [r7, #32]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f993 	bl	8003288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e07c      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d034      	beq.n	8003012 <HAL_I2C_Master_Receive+0x186>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d130      	bne.n	8003012 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2180      	movs	r1, #128	@ 0x80
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f880 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e04d      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2bff      	cmp	r3, #255	@ 0xff
 8002fd2:	d90e      	bls.n	8002ff2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	22ff      	movs	r2, #255	@ 0xff
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fab8 	bl	8003560 <I2C_TransferConfig>
 8002ff0:	e00f      	b.n	8003012 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	b2da      	uxtb	r2, r3
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	2300      	movs	r3, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 faa7 	bl	8003560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d19d      	bne.n	8002f58 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8ed 	bl	8003200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01a      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2220      	movs	r2, #32
 8003036:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_I2C_Master_Receive+0x1e8>)
 8003044:	400b      	ands	r3, r1
 8003046:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	80002400 	.word	0x80002400
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d103      	bne.n	8003096 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d007      	beq.n	80030b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	619a      	str	r2, [r3, #24]
  }
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d0:	e03b      	b.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f962 	bl	80033a0 <I2C_IsErrorOccurred>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d02d      	beq.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fbd3 	bl	8001898 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d122      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	429a      	cmp	r2, r3
 8003120:	d113      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d0b4      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800317e:	e033      	b.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f90b 	bl	80033a0 <I2C_IsErrorOccurred>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e031      	b.n	80031f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d025      	beq.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fb7c 	bl	8001898 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11a      	bne.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d013      	beq.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d1c4      	bne.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320c:	e02f      	b.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f8c4 	bl	80033a0 <I2C_IsErrorOccurred>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02d      	b.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe fb39 	bl	8001898 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d013      	beq.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b20      	cmp	r3, #32
 800327a:	d1c8      	bne.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003298:	e071      	b.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f87e 	bl	80033a0 <I2C_IsErrorOccurred>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d13b      	bne.n	8003334 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d138      	bne.n	8003334 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d105      	bne.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d121      	bne.n	800332e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2204      	movs	r2, #4
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2220      	movs	r2, #32
 80032fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b24      	ldr	r3, [pc, #144]	@ (800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800330c:	400b      	ands	r3, r1
 800330e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	e002      	b.n	8003334 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003334:	f7fe fab0 	bl	8001898 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	d302      	bcc.n	800334a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d116      	bne.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00f      	beq.n	800337e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b04      	cmp	r3, #4
 800338a:	d002      	beq.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d083      	beq.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003392:	7dfb      	ldrb	r3, [r7, #23]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	fe00e800 	.word	0xfe00e800

080033a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	@ 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d068      	beq.n	800349e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2210      	movs	r2, #16
 80033d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d4:	e049      	b.n	800346a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d045      	beq.n	800346a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fa5b 	bl	8001898 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_IsErrorOccurred+0x54>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d13a      	bne.n	800346a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003406:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003416:	d121      	bne.n	800345c <I2C_IsErrorOccurred+0xbc>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800341e:	d01d      	beq.n	800345c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b20      	cmp	r3, #32
 8003424:	d01a      	beq.n	800345c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003434:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003436:	f7fe fa2f 	bl	8001898 <HAL_GetTick>
 800343a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	e00e      	b.n	800345c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800343e:	f7fe fa2b 	bl	8001898 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b19      	cmp	r3, #25
 800344a:	d907      	bls.n	800345c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f043 0320 	orr.w	r3, r3, #32
 8003452:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800345a:	e006      	b.n	800346a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b20      	cmp	r3, #32
 8003468:	d1e9      	bne.n	800343e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b20      	cmp	r3, #32
 8003476:	d003      	beq.n	8003480 <I2C_IsErrorOccurred+0xe0>
 8003478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0aa      	beq.n	80033d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2220      	movs	r2, #32
 800348e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003504:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800350c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01c      	beq.n	800354e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fdaf 	bl	8003078 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <I2C_IsErrorOccurred+0x1bc>)
 8003526:	400b      	ands	r3, r1
 8003528:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800354e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003552:	4618      	mov	r0, r3
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	4613      	mov	r3, r2
 8003570:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003578:	7a7b      	ldrb	r3, [r7, #9]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003580:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	4313      	orrs	r3, r2
 800358a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800358e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	0d5b      	lsrs	r3, r3, #21
 800359a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <I2C_TransferConfig+0x60>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	43db      	mvns	r3, r3
 80035a4:	ea02 0103 	and.w	r1, r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	03ff63ff 	.word	0x03ff63ff

080035c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d138      	bne.n	800364c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e032      	b.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	d139      	bne.n	80036e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800367a:	2302      	movs	r3, #2
 800367c:	e033      	b.n	80036e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	@ 0x24
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01e      	beq.n	8003744 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003706:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <HAL_IPCC_Init+0x60>)
 8003708:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd ff50 	bl	80015bc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800371c:	68b8      	ldr	r0, [r7, #8]
 800371e:	f000 f85b 	bl	80037d8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f82c 	bl	800378c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003742:	e001      	b.n	8003748 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	58000c00 	.word	0x58000c00

08003758 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	4613      	mov	r3, r2
 800377e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e00f      	b.n	80037ba <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	4a0b      	ldr	r2, [pc, #44]	@ (80037d0 <IPCC_SetDefaultCallbacks+0x44>)
 80037a4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	3306      	adds	r3, #6
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	4a08      	ldr	r2, [pc, #32]	@ (80037d4 <IPCC_SetDefaultCallbacks+0x48>)
 80037b2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d9ec      	bls.n	800379a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	08003759 	.word	0x08003759
 80037d4:	08003773 	.word	0x08003773

080037d8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80037ec:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223f      	movs	r2, #63	@ 0x3f
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800380a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	58000400 	.word	0x58000400

08003820 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003824:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <HAL_PWREx_GetVoltageRange+0x18>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	58000400 	.word	0x58000400

0800383c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800384e:	d101      	bne.n	8003854 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800386e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	6013      	str	r3, [r2, #0]
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038ae:	d101      	bne.n	80038b4 <LL_RCC_HSE_IsReady+0x18>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <LL_RCC_HSE_IsReady+0x1a>
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f0:	6013      	str	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390e:	d101      	bne.n	8003914 <LL_RCC_HSI_IsReady+0x18>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <LL_RCC_HSI_IsReady+0x1a>
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003974:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d101      	bne.n	80039a6 <LL_RCC_HSI48_IsReady+0x18>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <LL_RCC_HSI48_IsReady+0x1a>
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d101      	bne.n	8003a52 <LL_RCC_LSE_IsReady+0x18>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <LL_RCC_LSE_IsReady+0x1a>
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d101      	bne.n	8003aba <LL_RCC_LSI1_IsReady+0x18>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <LL_RCC_LSI1_IsReady+0x1a>
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d101      	bne.n	8003b22 <LL_RCC_LSI2_IsReady+0x18>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <LL_RCC_LSI2_IsReady+0x1a>
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d101      	bne.n	8003bae <LL_RCC_MSI_IsReady+0x16>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_RCC_MSI_IsReady+0x18>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003bf8:	d901      	bls.n	8003bfe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003bfa:	23b0      	movs	r3, #176	@ 0xb0
 8003bfc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003bfe:	687b      	ldr	r3, [r7, #4]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 0203 	bic.w	r2, r3, #3
 8003c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003caa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cda:	f023 020f 	bic.w	r2, r3, #15
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	608b      	str	r3, [r1, #8]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d68:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dac:	6013      	str	r3, [r2, #0]
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dca:	d101      	bne.n	8003dd0 <LL_RCC_PLL_IsReady+0x18>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <LL_RCC_PLL_IsReady+0x1a>
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0303 	and.w	r3, r3, #3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e50:	d101      	bne.n	8003e56 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e76:	d101      	bne.n	8003e7c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d101      	bne.n	8003ea2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec0:	d101      	bne.n	8003ec6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ee4:	d101      	bne.n	8003eea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b08d      	sub	sp, #52	@ 0x34
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e363      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 808d 	beq.w	8004032 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f18:	f7ff fea1 	bl	8003c5e <LL_RCC_GetSysClkSource>
 8003f1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1e:	f7ff ff82 	bl	8003e26 <LL_RCC_PLL_GetMainSource>
 8003f22:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x3e>
 8003f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d147      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d144      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e347      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003f46:	f7ff fe4c 	bl	8003be2 <LL_RCC_MSI_GetRange>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d914      	bls.n	8003f7a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd03 	bl	8004960 <RCC_SetFlashLatencyFromMSIRange>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e336      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fe26 	bl	8003bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fe4a 	bl	8003c0c <LL_RCC_MSI_SetCalibTrimming>
 8003f78:	e013      	b.n	8003fa2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fe1b 	bl	8003bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fe3f 	bl	8003c0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fce4 	bl	8004960 <RCC_SetFlashLatencyFromMSIRange>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e317      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fa2:	f000 fcc9 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4aa4      	ldr	r2, [pc, #656]	@ (800423c <HAL_RCC_OscConfig+0x344>)
 8003faa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fac:	4ba4      	ldr	r3, [pc, #656]	@ (8004240 <HAL_RCC_OscConfig+0x348>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd fc23 	bl	80017fc <HAL_InitTick>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d039      	beq.n	8004030 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e308      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01e      	beq.n	8004006 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fc8:	f7ff fdc8 	bl	8003b5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fc64 	bl	8001898 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd4:	f7fd fc60 	bl	8001898 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e2f5      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003fe6:	f7ff fdd7 	bl	8003b98 <LL_RCC_MSI_IsReady>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f1      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fde0 	bl	8003bba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe04 	bl	8003c0c <LL_RCC_MSI_SetCalibTrimming>
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004006:	f7ff fdb8 	bl	8003b7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800400a:	f7fd fc45 	bl	8001898 <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004012:	f7fd fc41 	bl	8001898 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e2d6      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004024:	f7ff fdb8 	bl	8003b98 <LL_RCC_MSI_IsReady>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f1      	bne.n	8004012 <HAL_RCC_OscConfig+0x11a>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004030:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d047      	beq.n	80040ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403e:	f7ff fe0e 	bl	8003c5e <LL_RCC_GetSysClkSource>
 8004042:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004044:	f7ff feef 	bl	8003e26 <LL_RCC_PLL_GetMainSource>
 8004048:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x164>
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d108      	bne.n	8004068 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d134      	bne.n	80040ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2b4      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x180>
 8004072:	f7ff fbf5 	bl	8003860 <LL_RCC_HSE_Enable>
 8004076:	e001      	b.n	800407c <HAL_RCC_OscConfig+0x184>
 8004078:	f7ff fc01 	bl	800387e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d012      	beq.n	80040aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fc08 	bl	8001898 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fd fc04 	bl	8001898 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e299      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800409e:	f7ff fbfd 	bl	800389c <LL_RCC_HSE_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f1      	beq.n	800408c <HAL_RCC_OscConfig+0x194>
 80040a8:	e011      	b.n	80040ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd fbf5 	bl	8001898 <HAL_GetTick>
 80040ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b2:	f7fd fbf1 	bl	8001898 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b64      	cmp	r3, #100	@ 0x64
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e286      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80040c4:	f7ff fbea 	bl	800389c <LL_RCC_HSE_IsReady>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f1      	bne.n	80040b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d04c      	beq.n	8004174 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	f7ff fdc0 	bl	8003c5e <LL_RCC_GetSysClkSource>
 80040de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e0:	f7ff fea1 	bl	8003e26 <LL_RCC_PLL_GetMainSource>
 80040e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x200>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d10e      	bne.n	8004110 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d10b      	bne.n	8004110 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e266      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fc09 	bl	8003920 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800410e:	e031      	b.n	8004174 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d019      	beq.n	800414c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	f7ff fbd2 	bl	80038c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fbbc 	bl	8001898 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fd fbb8 	bl	8001898 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e24d      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004136:	f7ff fbe1 	bl	80038fc <LL_RCC_HSI_IsReady>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f1      	beq.n	8004124 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fbeb 	bl	8003920 <LL_RCC_HSI_SetCalibTrimming>
 800414a:	e013      	b.n	8004174 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414c:	f7ff fbc7 	bl	80038de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd fba2 	bl	8001898 <HAL_GetTick>
 8004154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004158:	f7fd fb9e 	bl	8001898 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e233      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800416a:	f7ff fbc7 	bl	80038fc <LL_RCC_HSI_IsReady>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f1      	bne.n	8004158 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a3 	beq.w	80042d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d076      	beq.n	8004284 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d046      	beq.n	8004230 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80041a2:	f7ff fc7e 	bl	8003aa2 <LL_RCC_LSI1_IsReady>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80041ac:	f7ff fc57 	bl	8003a5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b0:	f7fd fb72 	bl	8001898 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80041b8:	f7fd fb6e 	bl	8001898 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e203      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80041ca:	f7ff fc6a 	bl	8003aa2 <LL_RCC_LSI1_IsReady>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f1      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80041d4:	f7ff fc77 	bl	8003ac6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fb5e 	bl	8001898 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80041e0:	f7fd fb5a 	bl	8001898 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e1ef      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80041f2:	f7ff fc8a 	bl	8003b0a <LL_RCC_LSI2_IsReady>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f1      	beq.n	80041e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fc94 	bl	8003b2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004206:	f7ff fc3b 	bl	8003a80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd fb45 	bl	8001898 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004212:	f7fd fb41 	bl	8001898 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1d6      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004224:	f7ff fc3d 	bl	8003aa2 <LL_RCC_LSI1_IsReady>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f1      	bne.n	8004212 <HAL_RCC_OscConfig+0x31a>
 800422e:	e051      	b.n	80042d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004230:	f7ff fc15 	bl	8003a5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fd fb30 	bl	8001898 <HAL_GetTick>
 8004238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800423a:	e00c      	b.n	8004256 <HAL_RCC_OscConfig+0x35e>
 800423c:	2000011c 	.word	0x2000011c
 8004240:	20000120 	.word	0x20000120
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004244:	f7fd fb28 	bl	8001898 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1bd      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004256:	f7ff fc24 	bl	8003aa2 <LL_RCC_LSI1_IsReady>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f1      	beq.n	8004244 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004260:	f7ff fc42 	bl	8003ae8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004266:	f7fd fb17 	bl	8001898 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b03      	cmp	r3, #3
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1ac      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004278:	f7ff fc47 	bl	8003b0a <LL_RCC_LSI2_IsReady>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f1      	bne.n	8004266 <HAL_RCC_OscConfig+0x36e>
 8004282:	e027      	b.n	80042d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004284:	f7ff fc30 	bl	8003ae8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fb06 	bl	8001898 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004290:	f7fd fb02 	bl	8001898 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b03      	cmp	r3, #3
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e197      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80042a2:	f7ff fc32 	bl	8003b0a <LL_RCC_LSI2_IsReady>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f1      	bne.n	8004290 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80042ac:	f7ff fbe8 	bl	8003a80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd faf2 	bl	8001898 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80042b8:	f7fd faee 	bl	8001898 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e183      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80042ca:	f7ff fbea 	bl	8003aa2 <LL_RCC_LSI1_IsReady>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f1      	bne.n	80042b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d05b      	beq.n	8004398 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e0:	4ba7      	ldr	r3, [pc, #668]	@ (8004580 <HAL_RCC_OscConfig+0x688>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d114      	bne.n	8004316 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042ec:	f7ff fa88 	bl	8003800 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f0:	f7fd fad2 	bl	8001898 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f8:	f7fd face 	bl	8001898 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e163      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430a:	4b9d      	ldr	r3, [pc, #628]	@ (8004580 <HAL_RCC_OscConfig+0x688>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0x42c>
 800431e:	f7ff fb48 	bl	80039b2 <LL_RCC_LSE_Enable>
 8004322:	e00c      	b.n	800433e <HAL_RCC_OscConfig+0x446>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b05      	cmp	r3, #5
 800432a:	d104      	bne.n	8004336 <HAL_RCC_OscConfig+0x43e>
 800432c:	f7ff fb63 	bl	80039f6 <LL_RCC_LSE_EnableBypass>
 8004330:	f7ff fb3f 	bl	80039b2 <LL_RCC_LSE_Enable>
 8004334:	e003      	b.n	800433e <HAL_RCC_OscConfig+0x446>
 8004336:	f7ff fb4d 	bl	80039d4 <LL_RCC_LSE_Disable>
 800433a:	f7ff fb6d 	bl	8003a18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d014      	beq.n	8004370 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fd faa7 	bl	8001898 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fd faa3 	bl	8001898 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e136      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004364:	f7ff fb69 	bl	8003a3a <LL_RCC_LSE_IsReady>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ef      	beq.n	800434e <HAL_RCC_OscConfig+0x456>
 800436e:	e013      	b.n	8004398 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd fa92 	bl	8001898 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd fa8e 	bl	8001898 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e121      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800438e:	f7ff fb54 	bl	8003a3a <LL_RCC_LSE_IsReady>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ef      	bne.n	8004378 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02c      	beq.n	80043fe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d014      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043ac:	f7ff facd 	bl	800394a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fd fa72 	bl	8001898 <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b8:	f7fd fa6e 	bl	8001898 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e103      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80043ca:	f7ff fae0 	bl	800398e <LL_RCC_HSI48_IsReady>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f1      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4c0>
 80043d4:	e013      	b.n	80043fe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043d6:	f7ff fac9 	bl	800396c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fa5d 	bl	8001898 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e2:	f7fd fa59 	bl	8001898 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0ee      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80043f4:	f7ff facb 	bl	800398e <LL_RCC_HSI48_IsReady>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f1      	bne.n	80043e2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80e4 	beq.w	80045d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004408:	f7ff fc29 	bl	8003c5e <LL_RCC_GetSysClkSource>
 800440c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	2b02      	cmp	r3, #2
 800441c:	f040 80b4 	bne.w	8004588 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0203 	and.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	429a      	cmp	r2, r3
 800442c:	d123      	bne.n	8004476 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d11c      	bne.n	8004476 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d114      	bne.n	8004476 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d05d      	beq.n	8004532 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d058      	beq.n	800452e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800447c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0a1      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800448e:	f7ff fc84 	bl	8003d9a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004492:	f7fd fa01 	bl	8001898 <HAL_GetTick>
 8004496:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd f9fd 	bl	8001898 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e092      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ef      	bne.n	800449a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b30      	ldr	r3, [pc, #192]	@ (8004584 <HAL_RCC_OscConfig+0x68c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044cc:	4311      	orrs	r1, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044d2:	0212      	lsls	r2, r2, #8
 80044d4:	4311      	orrs	r1, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80044e6:	430a      	orrs	r2, r1
 80044e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044f0:	f7ff fc44 	bl	8003d7c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004504:	f7fd f9c8 	bl	8001898 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fd f9c4 	bl	8001898 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e059      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ef      	beq.n	800450c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452c:	e050      	b.n	80045d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e04f      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d147      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004540:	f7ff fc1c 	bl	8003d7c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004554:	f7fd f9a0 	bl	8001898 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd f99c 	bl	8001898 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e031      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x664>
 800457c:	e028      	b.n	80045d0 <HAL_RCC_OscConfig+0x6d8>
 800457e:	bf00      	nop
 8004580:	58000400 	.word	0x58000400
 8004584:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d01e      	beq.n	80045cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	f7ff fc04 	bl	8003d9a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fd f981 	bl	8001898 <HAL_GetTick>
 8004596:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fd f97d 	bl	8001898 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e012      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80045ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCC_OscConfig+0x6e4>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	60cb      	str	r3, [r1, #12]
 80045ca:	e001      	b.n	80045d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3734      	adds	r7, #52	@ 0x34
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	bf00      	nop
 80045dc:	eefefffc 	.word	0xeefefffc

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e12d      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b98      	ldr	r3, [pc, #608]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d91b      	bls.n	800463a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b95      	ldr	r3, [pc, #596]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 0207 	bic.w	r2, r3, #7
 800460a:	4993      	ldr	r1, [pc, #588]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004612:	f7fd f941 	bl	8001898 <HAL_GetTick>
 8004616:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	e008      	b.n	800462c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800461a:	f7fd f93d 	bl	8001898 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e111      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800462c:	4b8a      	ldr	r3, [pc, #552]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d1ef      	bne.n	800461a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fb13 	bl	8003c76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004650:	f7fd f922 	bl	8001898 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004658:	f7fd f91e 	bl	8001898 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0f2      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800466a:	f7ff fbe8 	bl	8003e3e <LL_RCC_IsActiveFlag_HPRE>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f1      	beq.n	8004658 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d016      	beq.n	80046ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fb0a 	bl	8003c9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800468a:	f7fd f905 	bl	8001898 <HAL_GetTick>
 800468e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004692:	f7fd f901 	bl	8001898 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0d5      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80046a4:	f7ff fbdd 	bl	8003e62 <LL_RCC_IsActiveFlag_C2HPRE>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f1      	beq.n	8004692 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb03 	bl	8003cca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046c4:	f7fd f8e8 	bl	8001898 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80046cc:	f7fd f8e4 	bl	8001898 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0b8      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80046de:	f7ff fbd3 	bl	8003e88 <LL_RCC_IsActiveFlag_SHDHPRE>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f1      	beq.n	80046cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fafd 	bl	8003cf8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80046fe:	f7fd f8cb 	bl	8001898 <HAL_GetTick>
 8004702:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004706:	f7fd f8c7 	bl	8001898 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e09b      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004718:	f7ff fbc9 	bl	8003eae <LL_RCC_IsActiveFlag_PPRE1>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f1      	beq.n	8004706 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d017      	beq.n	800475e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff faf3 	bl	8003d20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800473a:	f7fd f8ad 	bl	8001898 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004742:	f7fd f8a9 	bl	8001898 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e07d      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004754:	f7ff fbbd 	bl	8003ed2 <LL_RCC_IsActiveFlag_PPRE2>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f1      	beq.n	8004742 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d043      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d106      	bne.n	8004780 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004772:	f7ff f893 	bl	800389c <LL_RCC_HSE_IsReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11e      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e067      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d106      	bne.n	8004796 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004788:	f7ff fb16 	bl	8003db8 <LL_RCC_PLL_IsReady>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d113      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e05c      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800479e:	f7ff f9fb 	bl	8003b98 <LL_RCC_MSI_IsReady>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e051      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80047ac:	f7ff f8a6 	bl	80038fc <LL_RCC_HSI_IsReady>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e04a      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fa39 	bl	8003c36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd f868 	bl	8001898 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fd f864 	bl	8001898 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e036      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	f7ff fa3c 	bl	8003c5e <LL_RCC_GetSysClkSource>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d1ec      	bne.n	80047cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f2:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d21b      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004800:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 0207 	bic.w	r2, r3, #7
 8004808:	4913      	ldr	r1, [pc, #76]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004810:	f7fd f842 	bl	8001898 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	e008      	b.n	800482a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004818:	f7fd f83e 	bl	8001898 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e012      	b.n	8004850 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x278>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d1ef      	bne.n	8004818 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004838:	f000 f87e 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 800483c:	4603      	mov	r3, r0
 800483e:	4a07      	ldr	r2, [pc, #28]	@ (800485c <HAL_RCC_ClockConfig+0x27c>)
 8004840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004842:	f7fd f835 	bl	80018b0 <HAL_GetTickPrio>
 8004846:	4603      	mov	r3, r0
 8004848:	4618      	mov	r0, r3
 800484a:	f7fc ffd7 	bl	80017fc <HAL_InitTick>
 800484e:	4603      	mov	r3, r0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	58004000 	.word	0x58004000
 800485c:	2000011c 	.word	0x2000011c

08004860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004866:	f7ff f9fa 	bl	8003c5e <LL_RCC_GetSysClkSource>
 800486a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004872:	f7ff f9b6 	bl	8003be2 <LL_RCC_MSI_GetRange>
 8004876:	4603      	mov	r3, r0
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	4a2b      	ldr	r2, [pc, #172]	@ (800492c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e04b      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d102      	bne.n	8004894 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800488e:	4b28      	ldr	r3, [pc, #160]	@ (8004930 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e045      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b08      	cmp	r3, #8
 8004898:	d10a      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800489a:	f7fe ffcf 	bl	800383c <LL_RCC_HSE_IsEnabledDiv2>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80048a4:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e03a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80048aa:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <HAL_RCC_GetSysClockFreq+0xd4>)
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e037      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80048b0:	f7ff fab9 	bl	8003e26 <LL_RCC_PLL_GetMainSource>
 80048b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d003      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x64>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_GetSysClockFreq+0x6a>
 80048c2:	e00d      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048c6:	60bb      	str	r3, [r7, #8]
        break;
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80048ca:	f7fe ffb7 	bl	800383c <LL_RCC_HSE_IsEnabledDiv2>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d102      	bne.n	80048da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80048d4:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80048d8:	e00d      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80048da:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_RCC_GetSysClockFreq+0xd4>)
 80048dc:	60bb      	str	r3, [r7, #8]
        break;
 80048de:	e00a      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80048e0:	f7ff f97f 	bl	8003be2 <LL_RCC_MSI_GetRange>
 80048e4:	4603      	mov	r3, r0
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	4a0f      	ldr	r2, [pc, #60]	@ (800492c <HAL_RCC_GetSysClockFreq+0xcc>)
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	60bb      	str	r3, [r7, #8]
        break;
 80048f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80048f6:	f7ff fa71 	bl	8003ddc <LL_RCC_PLL_GetN>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	fb03 f402 	mul.w	r4, r3, r2
 8004902:	f7ff fa84 	bl	8003e0e <LL_RCC_PLL_GetDivider>
 8004906:	4603      	mov	r3, r0
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	3301      	adds	r3, #1
 800490c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004910:	f7ff fa71 	bl	8003df6 <LL_RCC_PLL_GetR>
 8004914:	4603      	mov	r3, r0
 8004916:	0f5b      	lsrs	r3, r3, #29
 8004918:	3301      	adds	r3, #1
 800491a:	fbb4 f3f3 	udiv	r3, r4, r3
 800491e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bd90      	pop	{r4, r7, pc}
 800492a:	bf00      	nop
 800492c:	08006264 	.word	0x08006264
 8004930:	00f42400 	.word	0x00f42400
 8004934:	01e84800 	.word	0x01e84800

08004938 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b598      	push	{r3, r4, r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800493c:	f7ff ff90 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8004940:	4604      	mov	r4, r0
 8004942:	f7ff fa01 	bl	8003d48 <LL_RCC_GetAHBPrescaler>
 8004946:	4603      	mov	r3, r0
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	4a03      	ldr	r2, [pc, #12]	@ (800495c <HAL_RCC_GetHCLKFreq+0x24>)
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd98      	pop	{r3, r4, r7, pc}
 800495c:	08006224 	.word	0x08006224

08004960 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2bb0      	cmp	r3, #176	@ 0xb0
 800496c:	d903      	bls.n	8004976 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e007      	b.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	4a11      	ldr	r2, [pc, #68]	@ (80049c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004984:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004986:	f7ff f9eb 	bl	8003d60 <LL_RCC_GetAHB4Prescaler>
 800498a:	4603      	mov	r3, r0
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	4a0d      	ldr	r2, [pc, #52]	@ (80049c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4a0a      	ldr	r2, [pc, #40]	@ (80049cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	0c9c      	lsrs	r4, r3, #18
 80049aa:	f7fe ff39 	bl	8003820 <HAL_PWREx_GetVoltageRange>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4619      	mov	r1, r3
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 f80c 	bl	80049d0 <RCC_SetFlashLatency>
 80049b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	08006264 	.word	0x08006264
 80049c8:	08006224 	.word	0x08006224
 80049cc:	431bde83 	.word	0x431bde83

080049d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b093      	sub	sp, #76	@ 0x4c
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80049da:	4b37      	ldr	r3, [pc, #220]	@ (8004ab8 <RCC_SetFlashLatency+0xe8>)
 80049dc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80049e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80049e6:	4a35      	ldr	r2, [pc, #212]	@ (8004abc <RCC_SetFlashLatency+0xec>)
 80049e8:	f107 031c 	add.w	r3, r7, #28
 80049ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80049ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80049f2:	4b33      	ldr	r3, [pc, #204]	@ (8004ac0 <RCC_SetFlashLatency+0xf0>)
 80049f4:	f107 040c 	add.w	r4, r7, #12
 80049f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80049fe:	2300      	movs	r3, #0
 8004a00:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a08:	d11a      	bne.n	8004a40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0e:	e013      	b.n	8004a38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	3348      	adds	r3, #72	@ 0x48
 8004a16:	443b      	add	r3, r7
 8004a18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d807      	bhi.n	8004a32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	3348      	adds	r3, #72	@ 0x48
 8004a28:	443b      	add	r3, r7
 8004a2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004a2e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004a30:	e020      	b.n	8004a74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a34:	3301      	adds	r3, #1
 8004a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d9e8      	bls.n	8004a10 <RCC_SetFlashLatency+0x40>
 8004a3e:	e019      	b.n	8004a74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a44:	e013      	b.n	8004a6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	3348      	adds	r3, #72	@ 0x48
 8004a4c:	443b      	add	r3, r7
 8004a4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d807      	bhi.n	8004a68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	3348      	adds	r3, #72	@ 0x48
 8004a5e:	443b      	add	r3, r7
 8004a60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004a66:	e005      	b.n	8004a74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d9e8      	bls.n	8004a46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004a74:	4b13      	ldr	r3, [pc, #76]	@ (8004ac4 <RCC_SetFlashLatency+0xf4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 0207 	bic.w	r2, r3, #7
 8004a7c:	4911      	ldr	r1, [pc, #68]	@ (8004ac4 <RCC_SetFlashLatency+0xf4>)
 8004a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a84:	f7fc ff08 	bl	8001898 <HAL_GetTick>
 8004a88:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a8a:	e008      	b.n	8004a9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a8c:	f7fc ff04 	bl	8001898 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e007      	b.n	8004aae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004a9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <RCC_SetFlashLatency+0xf4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d1ef      	bne.n	8004a8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	374c      	adds	r7, #76	@ 0x4c
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	080061f8 	.word	0x080061f8
 8004abc:	08006208 	.word	0x08006208
 8004ac0:	08006214 	.word	0x08006214
 8004ac4:	58004000 	.word	0x58004000

08004ac8 <LL_RCC_LSE_IsEnabled>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <LL_RCC_LSE_IsEnabled+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <LL_RCC_LSE_IsEnabled+0x1a>
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_LSE_IsReady>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d101      	bne.n	8004b04 <LL_RCC_LSE_IsReady+0x18>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <LL_RCC_LSE_IsReady+0x1a>
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <LL_RCC_SetRFWKPClockSource>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_RCC_SetSMPSClockSource>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	f023 0203 	bic.w	r2, r3, #3
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_RCC_SetSMPSPrescaler>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_SetUSARTClockSource>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f023 0203 	bic.w	r2, r3, #3
 8004ba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_SetLPUARTClockSource>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_SetI2CClockSource>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_SetLPTIMClockSource>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	43db      	mvns	r3, r3
 8004c36:	401a      	ands	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <LL_RCC_SetSAIClockSource>:
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_SetRNGClockSource>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_SetCLK48ClockSource>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <LL_RCC_SetUSBClockSource>:
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ffe3 	bl	8004caa <LL_RCC_SetCLK48ClockSource>
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <LL_RCC_SetADCClockSource>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_RCC_SetRTCClockSource>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_GetRTCClockSource>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_RCC_ForceBackupDomainReset>:
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004d98:	bf00      	nop
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <LL_RCC_PLLSAI1_Enable>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004db0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004db4:	6013      	str	r3, [r2, #0]
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_PLLSAI1_Disable>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_PLLSAI1_IsReady>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004df0:	d101      	bne.n	8004df6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b088      	sub	sp, #32
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004e0e:	2300      	movs	r3, #0
 8004e10:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d034      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e26:	d021      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004e28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e2c:	d81b      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e32:	d01d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e38:	d815      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004e3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e42:	d110      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e52:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e54:	e00d      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f947 	bl	80050ee <RCCEx_PLLSAI1_ConfigNP>
 8004e60:	4603      	mov	r3, r0
 8004e62:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004e64:	e005      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	77fb      	strb	r3, [r7, #31]
        break;
 8004e6a:	e002      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	7ffb      	ldrb	r3, [r7, #31]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fee8 	bl	8004c52 <LL_RCC_SetSAIClockSource>
 8004e82:	e001      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	7ffb      	ldrb	r3, [r7, #31]
 8004e86:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d046      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004e94:	f7ff ff56 	bl	8004d44 <LL_RCC_GetRTCClockSource>
 8004e98:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d03c      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ea4:	f7fe fcac 	bl	8003800 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ff30 	bl	8004d18 <LL_RCC_SetRTCClockSource>
 8004eb8:	e02e      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004ec4:	f7ff ff4b 	bl	8004d5e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004ec8:	f7ff ff5a 	bl	8004d80 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ee4:	f7ff fdf0 	bl	8004ac8 <LL_RCC_LSE_IsEnabled>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d114      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eee:	f7fc fcd3 	bl	8001898 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ef4:	e00b      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fc fccf 	bl	8001898 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d902      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	77fb      	strb	r3, [r7, #31]
              break;
 8004f0c:	e004      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f0e:	f7ff fded 	bl	8004aec <LL_RCC_LSE_IsReady>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d1ee      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	77bb      	strb	r3, [r7, #30]
 8004f1c:	e001      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
 8004f20:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fe2a 	bl	8004b8c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fe35 	bl	8004bb8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe5d 	bl	8004c1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d004      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fe52 	bl	8004c1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fe2a 	bl	8004be4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fe1f 	bl	8004be4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d022      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fe8d 	bl	8004cd6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fd4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fde:	d10b      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f8dd 	bl	80051a4 <RCCEx_PLLSAI1_ConfigNQ>
 8004fea:	4603      	mov	r3, r0
 8004fec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004ff4:	7ffb      	ldrb	r3, [r7, #31]
 8004ff6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02b      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500c:	d008      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fe2a 	bl	8004c7e <LL_RCC_SetRNGClockSource>
 800502a:	e00a      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	2000      	movs	r0, #0
 8005038:	f7ff fe21 	bl	8004c7e <LL_RCC_SetRNGClockSource>
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff fe34 	bl	8004caa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800504a:	d107      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800505a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005064:	2b00      	cmp	r3, #0
 8005066:	d022      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fe3d 	bl	8004cec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800507a:	d107      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005094:	d10b      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f8dd 	bl	800525a <RCCEx_PLLSAI1_ConfigNR>
 80050a0:	4603      	mov	r3, r0
 80050a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fd26 	bl	8004b10 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fd45 	bl	8004b64 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fd2c 	bl	8004b3c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80050e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050fa:	f7ff fe61 	bl	8004dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050fe:	f7fc fbcb 	bl	8001898 <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005104:	e009      	b.n	800511a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005106:	f7fc fbc7 	bl	8001898 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d902      	bls.n	800511a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	73fb      	strb	r3, [r7, #15]
      break;
 8005118:	e004      	b.n	8005124 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800511a:	f7ff fe60 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d137      	bne.n	800519a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800513e:	4313      	orrs	r3, r2
 8005140:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005154:	4313      	orrs	r3, r2
 8005156:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005158:	f7ff fe23 	bl	8004da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515c:	f7fc fb9c 	bl	8001898 <HAL_GetTick>
 8005160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005162:	e009      	b.n	8005178 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005164:	f7fc fb98 	bl	8001898 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d902      	bls.n	8005178 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	73fb      	strb	r3, [r7, #15]
        break;
 8005176:	e004      	b.n	8005182 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005178:	f7ff fe31 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d1f0      	bne.n	8005164 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005196:	4313      	orrs	r3, r2
 8005198:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80051b0:	f7ff fe06 	bl	8004dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051b4:	f7fc fb70 	bl	8001898 <HAL_GetTick>
 80051b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051ba:	e009      	b.n	80051d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051bc:	f7fc fb6c 	bl	8001898 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d902      	bls.n	80051d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	73fb      	strb	r3, [r7, #15]
      break;
 80051ce:	e004      	b.n	80051da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80051d0:	f7ff fe05 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d137      	bne.n	8005250 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051f4:	4313      	orrs	r3, r2
 80051f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800520a:	4313      	orrs	r3, r2
 800520c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800520e:	f7ff fdc8 	bl	8004da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005212:	f7fc fb41 	bl	8001898 <HAL_GetTick>
 8005216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005218:	e009      	b.n	800522e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800521a:	f7fc fb3d 	bl	8001898 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d902      	bls.n	800522e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	73fb      	strb	r3, [r7, #15]
        break;
 800522c:	e004      	b.n	8005238 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800522e:	f7ff fdd6 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 8005232:	4603      	mov	r3, r0
 8005234:	2b01      	cmp	r3, #1
 8005236:	d1f0      	bne.n	800521a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d108      	bne.n	8005250 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800524c:	4313      	orrs	r3, r2
 800524e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005266:	f7ff fdab 	bl	8004dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800526a:	f7fc fb15 	bl	8001898 <HAL_GetTick>
 800526e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005270:	e009      	b.n	8005286 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005272:	f7fc fb11 	bl	8001898 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d902      	bls.n	8005286 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e004      	b.n	8005290 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005286:	f7ff fdaa 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d137      	bne.n	8005306 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052aa:	4313      	orrs	r3, r2
 80052ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052c0:	4313      	orrs	r3, r2
 80052c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80052c4:	f7ff fd6d 	bl	8004da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fc fae6 	bl	8001898 <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d0:	f7fc fae2 	bl	8001898 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
        break;
 80052e2:	e004      	b.n	80052ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80052e4:	f7ff fd7b 	bl	8004dde <LL_RCC_PLLSAI1_IsReady>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d1f0      	bne.n	80052d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d108      	bne.n	8005306 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e095      	b.n	800544e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc f93e 	bl	80015e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005388:	d902      	bls.n	8005390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e002      	b.n	8005396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800539e:	d007      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f2:	ea42 0103 	orr.w	r1, r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f003 0204 	and.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800542c:	ea42 0103 	orr.w	r1, r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_SPI_Transmit+0x22>
 8005474:	2302      	movs	r3, #2
 8005476:	e15f      	b.n	8005738 <HAL_SPI_Transmit+0x2e2>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005480:	f7fc fa0a 	bl	8001898 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005496:	2302      	movs	r3, #2
 8005498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800549a:	e148      	b.n	800572e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SPI_Transmit+0x52>
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ac:	e13f      	b.n	800572e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f8:	d10f      	bne.n	800551a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d007      	beq.n	8005538 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005540:	d94f      	bls.n	80055e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0xfa>
 800554a:	8afb      	ldrh	r3, [r7, #22]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d142      	bne.n	80055d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	881a      	ldrh	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005574:	e02f      	b.n	80055d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d112      	bne.n	80055aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055a8:	e015      	b.n	80055d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055aa:	f7fc f975 	bl	8001898 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d803      	bhi.n	80055c2 <HAL_SPI_Transmit+0x16c>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d102      	bne.n	80055c8 <HAL_SPI_Transmit+0x172>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80055d4:	e0ab      	b.n	800572e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ca      	bne.n	8005576 <HAL_SPI_Transmit+0x120>
 80055e0:	e080      	b.n	80056e4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0x19a>
 80055ea:	8afb      	ldrh	r3, [r7, #22]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d174      	bne.n	80056da <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d912      	bls.n	8005620 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560a:	1c9a      	adds	r2, r3, #2
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b02      	subs	r3, #2
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800561e:	e05c      	b.n	80056da <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	330c      	adds	r3, #12
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005646:	e048      	b.n	80056da <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d12b      	bne.n	80056ae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d912      	bls.n	8005686 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b02      	subs	r3, #2
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005684:	e029      	b.n	80056da <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056ac:	e015      	b.n	80056da <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ae:	f7fc f8f3 	bl	8001898 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_Transmit+0x270>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x276>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80056d8:	e029      	b.n	800572e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1b1      	bne.n	8005648 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fd07 	bl	80060fc <SPI_EndRxTxTransaction>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e003      	b.n	800572e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005736:	7ffb      	ldrb	r3, [r7, #31]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d002      	beq.n	8005766 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005760:	2302      	movs	r3, #2
 8005762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005764:	e11a      	b.n	800599c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800576e:	d112      	bne.n	8005796 <HAL_SPI_Receive+0x56>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10e      	bne.n	8005796 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2204      	movs	r2, #4
 800577c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f90e 	bl	80059ae <HAL_SPI_TransmitReceive>
 8005792:	4603      	mov	r3, r0
 8005794:	e107      	b.n	80059a6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_SPI_Receive+0x64>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e100      	b.n	80059a6 <HAL_SPI_Receive+0x266>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ac:	f7fc f874 	bl	8001898 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Receive+0x7e>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c2:	e0eb      	b.n	800599c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2204      	movs	r2, #4
 80057c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800580e:	d908      	bls.n	8005822 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	e007      	b.n	8005832 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005830:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583a:	d10f      	bne.n	800585c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800584a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d007      	beq.n	800587a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005882:	d86f      	bhi.n	8005964 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005884:	e034      	b.n	80058f0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d117      	bne.n	80058c4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f103 020c 	add.w	r2, r3, #12
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80058c2:	e015      	b.n	80058f0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c4:	f7fb ffe8 	bl	8001898 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d803      	bhi.n	80058dc <HAL_SPI_Receive+0x19c>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d102      	bne.n	80058e2 <HAL_SPI_Receive+0x1a2>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058ee:	e055      	b.n	800599c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1c4      	bne.n	8005886 <HAL_SPI_Receive+0x146>
 80058fc:	e038      	b.n	8005970 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d115      	bne.n	8005938 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	b292      	uxth	r2, r2
 8005918:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005936:	e015      	b.n	8005964 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005938:	f7fb ffae 	bl	8001898 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d803      	bhi.n	8005950 <HAL_SPI_Receive+0x210>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d102      	bne.n	8005956 <HAL_SPI_Receive+0x216>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005962:	e01b      	b.n	800599c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1c6      	bne.n	80058fe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 fb69 	bl	800604c <SPI_EndRxTransaction>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
 8005992:	e003      	b.n	800599c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08a      	sub	sp, #40	@ 0x28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x26>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e20a      	b.n	8005dea <HAL_SPI_TransmitReceive+0x43c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059dc:	f7fb ff5c 	bl	8001898 <HAL_GetTick>
 80059e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f8:	7efb      	ldrb	r3, [r7, #27]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d00e      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x6e>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a04:	d106      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x66>
 8005a0e:	7efb      	ldrb	r3, [r7, #27]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d003      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a1a:	e1e0      	b.n	8005dde <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x80>
 8005a28:	887b      	ldrh	r3, [r7, #2]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a34:	e1d3      	b.n	8005dde <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d003      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	887a      	ldrh	r2, [r7, #2]
 8005a76:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a8c:	d802      	bhi.n	8005a94 <HAL_SPI_TransmitReceive+0xe6>
 8005a8e:	8a3b      	ldrh	r3, [r7, #16]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d908      	bls.n	8005aa6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	e007      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	d007      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005adc:	f240 8081 	bls.w	8005be2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x140>
 8005ae8:	8a7b      	ldrh	r3, [r7, #18]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d16d      	bne.n	8005bca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afe:	1c9a      	adds	r2, r3, #2
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b12:	e05a      	b.n	8005bca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d11b      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x1ac>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d016      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x1ac>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d113      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	881a      	ldrh	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	1c9a      	adds	r2, r3, #2
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d11c      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x1f4>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba2:	f7fb fe79 	bl	8001898 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d80b      	bhi.n	8005bca <HAL_SPI_TransmitReceive+0x21c>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d007      	beq.n	8005bca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005bc8:	e109      	b.n	8005dde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d19f      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x166>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d199      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x166>
 8005be0:	e0e3      	b.n	8005daa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x244>
 8005bea:	8a7b      	ldrh	r3, [r7, #18]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 80cf 	bne.w	8005d90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d912      	bls.n	8005c22 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b02      	subs	r3, #2
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c20:	e0b6      	b.n	8005d90 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c48:	e0a2      	b.n	8005d90 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d134      	bne.n	8005cc2 <HAL_SPI_TransmitReceive+0x314>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02f      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x314>
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d12c      	bne.n	8005cc2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d912      	bls.n	8005c98 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	881a      	ldrh	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b02      	subs	r3, #2
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c96:	e012      	b.n	8005cbe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	7812      	ldrb	r2, [r2, #0]
 8005ca4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d148      	bne.n	8005d62 <HAL_SPI_TransmitReceive+0x3b4>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d042      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d923      	bls.n	8005d30 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b02      	subs	r3, #2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d81f      	bhi.n	8005d5e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e016      	b.n	8005d5e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f103 020c 	add.w	r2, r3, #12
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	7812      	ldrb	r2, [r2, #0]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d62:	f7fb fd99 	bl	8001898 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d803      	bhi.n	8005d7a <HAL_SPI_TransmitReceive+0x3cc>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d102      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x3d2>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005d8e:	e026      	b.n	8005dde <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f47f af57 	bne.w	8005c4a <HAL_SPI_TransmitReceive+0x29c>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f47f af50 	bne.w	8005c4a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f9a4 	bl	80060fc <SPI_EndRxTxTransaction>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd4:	e003      	b.n	8005dde <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005de6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3728      	adds	r7, #40	@ 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e00:	b2db      	uxtb	r3, r3
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e20:	f7fb fd3a 	bl	8001898 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e30:	f7fb fd32 	bl	8001898 <HAL_GetTick>
 8005e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e36:	4b39      	ldr	r3, [pc, #228]	@ (8005f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	015b      	lsls	r3, r3, #5
 8005e3c:	0d1b      	lsrs	r3, r3, #20
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e46:	e054      	b.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d050      	beq.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e50:	f7fb fd22 	bl	8001898 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d902      	bls.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d13d      	bne.n	8005ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e7e:	d111      	bne.n	8005ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e88:	d004      	beq.n	8005e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e92:	d107      	bne.n	8005ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eac:	d10f      	bne.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e017      	b.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4013      	ands	r3, r2
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	bf0c      	ite	eq
 8005f02:	2301      	moveq	r3, #1
 8005f04:	2300      	movne	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d19b      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000011c 	.word	0x2000011c

08005f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	@ 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f32:	f7fb fcb1 	bl	8001898 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	4413      	add	r3, r2
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f42:	f7fb fca9 	bl	8001898 <HAL_GetTick>
 8005f46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f50:	4b3d      	ldr	r3, [pc, #244]	@ (8006048 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	00da      	lsls	r2, r3, #3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	0d1b      	lsrs	r3, r3, #20
 8005f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f68:	e060      	b.n	800602c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f70:	d107      	bne.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d104      	bne.n	8005f82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f88:	d050      	beq.n	800602c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f8a:	f7fb fc85 	bl	8001898 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d902      	bls.n	8005fa0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d13d      	bne.n	800601c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fb8:	d111      	bne.n	8005fde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc2:	d004      	beq.n	8005fce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fcc:	d107      	bne.n	8005fde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe6:	d10f      	bne.n	8006008 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006006:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e010      	b.n	800603e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	3b01      	subs	r3, #1
 800602a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d196      	bne.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3728      	adds	r7, #40	@ 0x28
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000011c 	.word	0x2000011c

0800604c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006060:	d111      	bne.n	8006086 <SPI_EndRxTransaction+0x3a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606a:	d004      	beq.n	8006076 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006074:	d107      	bne.n	8006086 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	2180      	movs	r1, #128	@ 0x80
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff febd 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e023      	b.n	80060f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b4:	d11d      	bne.n	80060f2 <SPI_EndRxTransaction+0xa6>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060be:	d004      	beq.n	80060ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c8:	d113      	bne.n	80060f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff ff22 	bl	8005f20 <SPI_WaitFifoStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e000      	b.n	80060f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff03 	bl	8005f20 <SPI_WaitFifoStateUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e027      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	2180      	movs	r1, #128	@ 0x80
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff fe68 	bl	8005e10 <SPI_WaitFlagStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e014      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fedc 	bl	8005f20 <SPI_WaitFifoStateUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006172:	f043 0220 	orr.w	r2, r3, #32
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e000      	b.n	8006180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <memset>:
 8006188:	4402      	add	r2, r0
 800618a:	4603      	mov	r3, r0
 800618c:	4293      	cmp	r3, r2
 800618e:	d100      	bne.n	8006192 <memset+0xa>
 8006190:	4770      	bx	lr
 8006192:	f803 1b01 	strb.w	r1, [r3], #1
 8006196:	e7f9      	b.n	800618c <memset+0x4>

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4d0d      	ldr	r5, [pc, #52]	@ (80061d0 <__libc_init_array+0x38>)
 800619c:	4c0d      	ldr	r4, [pc, #52]	@ (80061d4 <__libc_init_array+0x3c>)
 800619e:	1b64      	subs	r4, r4, r5
 80061a0:	10a4      	asrs	r4, r4, #2
 80061a2:	2600      	movs	r6, #0
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	4d0b      	ldr	r5, [pc, #44]	@ (80061d8 <__libc_init_array+0x40>)
 80061aa:	4c0c      	ldr	r4, [pc, #48]	@ (80061dc <__libc_init_array+0x44>)
 80061ac:	f000 f818 	bl	80061e0 <_init>
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	2600      	movs	r6, #0
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	080062a4 	.word	0x080062a4
 80061d4:	080062a4 	.word	0x080062a4
 80061d8:	080062a4 	.word	0x080062a4
 80061dc:	080062a8 	.word	0x080062a8

080061e0 <_init>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr

080061ec <_fini>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	bf00      	nop
 80061f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f2:	bc08      	pop	{r3}
 80061f4:	469e      	mov	lr, r3
 80061f6:	4770      	bx	lr
